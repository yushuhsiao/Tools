using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Net;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;

namespace StackExchange.Redis
{
    public sealed class RedisConnection : RedisConnectionExtensions.RedisConnectionBase, IDisposable//, IDatabase
    {
        internal static readonly RedisConnection _null_item = new RedisConnection(null, null, null, null, 0);

        private static class _RedisBase
        {
            public static class CursorUtils
            {
                internal const long Origin = 0;
                internal const int
                    DefaultRedisPageSize = 10,
                    DefaultLibraryPageSize = 250;
            }
        }

        private IDatabase _database;
        private Action<RedisConnection> _dispose;

        internal RedisConnection(IServiceProvider service, Action<RedisConnection> dispose, IDatabase database, string configuration, double timeout)
            : base(service?.GetService<ILogger<RedisConnection>>(), configuration, timeout)
        {
            this._database = database;
            this._dispose = dispose;
        }


        internal void CloseConnection(Exception ex, string msg, [CallerMemberName] string caller = null)
        {
            logger.LogError(ex, $"Error : {caller}({msg})");
            this.CloseConnection();
        }

        public void CloseConnection()
        {
            using (var m = _database?.Multiplexer)
                _database = null;
            _dispose?.Invoke(this);
        }

        void IDisposable.Dispose() => _dispose?.Invoke(this);

        public bool IsAlive => this._GetDatabase(out var database);

        public bool GetDatabase(out IDatabase database) => _GetDatabase(out database);
        private bool _GetDatabase(out IDatabase database)
        {
            database = null;
            if (object.ReferenceEquals(this, _null_item))
                return false;
            database = _database;
            return database != null;
        }

        public void Execute(Action<IDatabase> cb, Func<Exception, string, string> err = null, [CallerMemberName] string caller = null)
        {
            if (this._GetDatabase(out var database))
                try { cb(database); }
                catch (Exception ex) { CloseConnection(ex, (err ?? _err)(ex, caller)); }
        }

        public T Execute<T>(Func<IDatabase, T> cb, Func<Exception, string, string> err = null, [CallerMemberName] string caller = null)
        {
            if (this._GetDatabase(out var database))
                try { return cb(database); }
                catch (Exception ex) { CloseConnection(ex, (err ?? _err)(ex, caller)); }
            return default;
        }

        public async Task<T> Execute<T>(Func<IDatabase, Task<T>> cb, Func<Exception, string, string> err = null, [CallerMemberName] string caller = null)
        {
            if (this._GetDatabase(out var database))
                try { return await cb(database); }
                catch (Exception ex) { CloseConnection(ex, (err ?? _err)(ex, caller)); }
            return default;
        }

        private string _err(Exception ex, string caller) => $"{caller}";


        public List<string> GetKeys(int? db = null, string pattern = "*", int pageSize = _RedisBase.CursorUtils.DefaultLibraryPageSize, long cursor = _RedisBase.CursorUtils.Origin, int pageOffset = 0, CommandFlags flags = CommandFlags.None)
        {
            List<string> endmodel = null;
            if (this._GetDatabase(out var database))
                try
                {
                    if (GetServer(db, out var server))
                    {
                        var keys = server.Keys(db ?? database.Database, pattern, pageSize, cursor, pageOffset, flags);
                        endmodel = new List<string>();
                        foreach (var m in keys)
                            endmodel.Add(m);
                    }
                    return endmodel;
                }
                catch (Exception ex)
                {
                    CloseConnection();
                    logger.LogError(ex, $"Error : GetKeys");
                }
            return endmodel;
        }

        public async Task<List<string>> GetKeysAsync(int? db = null, string pattern = "*") => await Task.FromResult(this.GetKeys(db, pattern));

        public System.Linq.IGrouping<string, KeyValuePair<string, string>>[] Info(RedisValue section, CommandFlags flags = CommandFlags.None)
        {
            if (GetServer(null, out var server))
                return server.Info(section, flags);
            return null;
        }

        /// <summary>
        /// 列出每個 db 的 key 數量
        /// </summary>
        /// <param name="flags"></param>
        /// <returns></returns>
        public IEnumerable<KeyValuePair<int, int>> Info_KeysCount(CommandFlags flags = CommandFlags.None)
        {
            var info = this.Info("keyspace");
            foreach (var info2 in info)
            {
                if (info2.Key == "Keyspace")
                {
                    foreach (var info3 in info2)
                    {
                        if (info3.Key.StartsWith("db", StringComparison.OrdinalIgnoreCase))
                        {
                            if (info3.Key.Substring(2).ToInt32(out int db))
                            {
                                foreach (var info4 in info3.Value.Split(','))
                                {
                                    if (info4.StartsWith("keys=", StringComparison.OrdinalIgnoreCase))
                                    {
                                        if (info4.Substring(5).ToInt32(out var n))
                                        {
                                            yield return new KeyValuePair<int, int>(db, n);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public bool GetServer(int? db, out IServer server)
        {
            if (this._GetDatabase(out var database))
                if (db.HasValue)
                {
                    if (database.Database != db.Value)
                        database = database.Multiplexer.GetDatabase(db.Value);
                }

            var endPoints = database.Multiplexer.GetEndPoints();
            if (endPoints.Length > 0)
            {
                server = database.Multiplexer.GetServer(endPoints[0]);
                return true;
            }
            server = null;
            return false;
        }


        public IConnectionMultiplexer Multiplexer => _database.Multiplexer;

        private T json<T>(RedisValue value)
        {
            if (value.HasValue)
                return JsonConvert.DeserializeObject<T>(value.ToString());
            return default;
        }

        public T /***********************************/ GetObject<T>(RedisKey key, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************************************************************************/ => Execute(db => json<T>(db.StringGet(key, flags )) /****************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ SetObject<T>(RedisKey key, T obj, TimeSpan? expiry, When when) /***********************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringSet(key, JsonConvert.SerializeObject(obj), expiry, when) /*********************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ SetObject<T>(RedisKey key, T obj, TimeSpan? expiry, When when, CommandFlags flags) /***************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringSet(key, JsonConvert.SerializeObject(obj), expiry, when, flags) /**************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ SetObject<T>(RedisKey key, T obj, TimeSpan? expiry = null, bool keepTtl = false, When when = When.Always, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************/ => Execute(db => db.StringSet(key, JsonConvert.SerializeObject(obj), expiry , keepTtl , when , flags ) /*************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<T> /*****************************/ GetObjectAsync<T>(RedisKey key, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************************************************************************************************************/ => Execute(async db => json<T>(await db.StringGetAsync(key, flags)) /************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ SetObjectAsync<T>(RedisKey key, T obj, TimeSpan? expiry, When when) /******************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringSetAsync(key, JsonConvert.SerializeObject(obj), expiry, when) /****************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ SetObjectAsync<T>(RedisKey key, T obj, TimeSpan? expiry, When when, CommandFlags flags) /**********************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringSetAsync(key, JsonConvert.SerializeObject(obj), expiry, when, flags) /*********************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ SetObjectAsync<T>(RedisKey key, T obj, TimeSpan? expiry = null, bool keepTtl = false, When when = When.Always, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************/ => Execute(db => db.StringSetAsync(key, JsonConvert.SerializeObject(obj), expiry, keepTtl, when, flags) /************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue /**************************/ StringGet(RedisKey key, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringGet(key, flags) /**************************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ StringSet(RedisKey key, RedisValue value, TimeSpan? expiry, When when) /***************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringSet(key, value, expiry, when) /************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ StringSet(RedisKey key, RedisValue value, TimeSpan? expiry, When when, CommandFlags flags) /*******************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringSet(key, value, expiry, when, flags) /*****************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ StringSet(RedisKey key, RedisValue value, TimeSpan? expiry = null, bool keepTtl = false, When when = When.Always, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************/ => Execute(db => db.StringSet(key, value, expiry, keepTtl, when, flags) /********************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue> /********************/ StringGetAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringGetAsync(key, flags) /*********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ StringSetAsync(RedisKey key, RedisValue value, TimeSpan? expiry, When when) /**********************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringSetAsync(key, value, expiry, when) /*******************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ StringSetAsync(RedisKey key, RedisValue value, TimeSpan? expiry, When when, CommandFlags flags) /**************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringSetAsync(key, value, expiry, when, flags) /************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ StringSetAsync(RedisKey key, RedisValue value, TimeSpan? expiry = null, bool keepTtl = false, When when = When.Always, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************/ => Execute(db => db.StringSetAsync(key, value, expiry, keepTtl, when, flags) /***************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue[] /************************/ StringGet(RedisKey[] keys, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringGet(keys, flags) /*************************************************************************************************************/ , (ex, caller) => $"{caller} ");
        public bool /********************************/ StringSet(KeyValuePair<RedisKey, RedisValue>[] values, When when = When.Always, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************************************************************/ => Execute(db => db.StringSet(values, when, flags) /*****************************************************************************************************/ , (ex, caller) => $"{caller} ");
        public Task<RedisValue[]> /******************/ StringGetAsync(RedisKey[] keys, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringGetAsync(keys, flags) /********************************************************************************************************/ , (ex, caller) => $"{caller} ");
        public Task<bool> /**************************/ StringSetAsync(KeyValuePair<RedisKey, RedisValue>[] values, When when = When.Always, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************/ => Execute(db => db.StringSetAsync(values, when, flags) /************************************************************************************************/ , (ex, caller) => $"{caller} ");
        public IBatch /******************************/ CreateBatch(object asyncState = null) /************************************************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.CreateBatch(asyncState) /************************************************************************************************************/ , (ex, caller) => $"{caller}");
        public ITransaction /************************/ CreateTransaction(object asyncState = null) /******************************************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.CreateTransaction(asyncState) /******************************************************************************************************/ , (ex, caller) => $"{caller}");
        public RedisValue /**************************/ DebugObject(RedisKey key, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.DebugObject(key, flags) /************************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue> /********************/ DebugObjectAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.DebugObjectAsync(key, flags) /*******************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisResult /*************************/ Execute(string command, params object[] args) /****************************************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.Execute(command, args) /*************************************************************************************************************/ , (ex, caller) => $"{caller} {command}");
        public RedisResult /*************************/ Execute(string command, ICollection<object> args, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************************************************************/ => Execute(db => db.Execute(command, args, flags) /******************************************************************************************************/ , (ex, caller) => $"{caller} {command}");
        public Task<RedisResult> /*******************/ ExecuteAsync(string command, params object[] args) /***********************************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.ExecuteAsync(command, args) /********************************************************************************************************/ , (ex, caller) => $"{caller} {command}");
        public Task<RedisResult> /*******************/ ExecuteAsync(string command, ICollection<object> args, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************************************/ => Execute(db => db.ExecuteAsync(command, args, flags) /*************************************************************************************************/ , (ex, caller) => $"{caller} {command}");
        public bool /********************************/ GeoAdd(RedisKey key, double longitude, double latitude, RedisValue member, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************************/ => Execute(db => db.GeoAdd(key, longitude, latitude, member, flags) /************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ GeoAdd(RedisKey key, GeoEntry value, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************************************************************/ => Execute(db => db.GeoAdd(key, value, flags) /**********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ GeoAdd(RedisKey key, GeoEntry[] values, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************************************************/ => Execute(db => db.GeoAdd(key, values, flags) /*********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ GeoAddAsync(RedisKey key, double longitude, double latitude, RedisValue member, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************************************************************/ => Execute(db => db.GeoAddAsync(key, longitude, latitude, member, flags) /*******************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ GeoAddAsync(RedisKey key, GeoEntry value, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************************************/ => Execute(db => db.GeoAddAsync(key, value, flags) /*****************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ GeoAddAsync(RedisKey key, GeoEntry[] values, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************************************************************************************************************************/ => Execute(db => db.GeoAddAsync(key, values, flags) /****************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public double? /*****************************/ GeoDistance(RedisKey key, RedisValue member1, RedisValue member2, GeoUnit unit = GeoUnit.Meters, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************/ => Execute(db => db.GeoDistance(key, member1, member2, unit, flags) /************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<double?> /***********************/ GeoDistanceAsync(RedisKey key, RedisValue member1, RedisValue member2, GeoUnit unit = GeoUnit.Meters, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************/ => Execute(db => db.GeoDistanceAsync(key, member1, member2, unit, flags) /*******************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public string[] /****************************/ GeoHash(RedisKey key, RedisValue[] members, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************************************************************************************************/ => Execute(db => db.GeoHash(key, members, flags) /*******************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public string /******************************/ GeoHash(RedisKey key, RedisValue member, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************************************************/ => Execute(db => db.GeoHash(key, member, flags) /********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<string[]> /**********************/ GeoHashAsync(RedisKey key, RedisValue[] members, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************************************************/ => Execute(db => db.GeoHashAsync(key, members, flags) /**************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<string> /************************/ GeoHashAsync(RedisKey key, RedisValue member, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************************************************/ => Execute(db => db.GeoHashAsync(key, member, flags) /***************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public GeoPosition?[] /**********************/ GeoPosition(RedisKey key, RedisValue[] members, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************************************************************************************/ => Execute(db => db.GeoPosition(key, members, flags) /***************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public GeoPosition? /************************/ GeoPosition(RedisKey key, RedisValue member, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************************************************************************************************************************/ => Execute(db => db.GeoPosition(key, member, flags) /****************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<GeoPosition?[]> /****************/ GeoPositionAsync(RedisKey key, RedisValue[] members, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************************************/ => Execute(db => db.GeoPositionAsync(key, members, flags) /**********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<GeoPosition?> /******************/ GeoPositionAsync(RedisKey key, RedisValue member, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************************************************************/ => Execute(db => db.GeoPositionAsync(key, member, flags) /***********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public GeoRadiusResult[] /*******************/ GeoRadius(RedisKey key, RedisValue member, double radius, GeoUnit unit = GeoUnit.Meters, int count = -1, Order? order = null, GeoRadiusOptions options = GeoRadiusOptions.Default, CommandFlags flags = CommandFlags.None) /***********************************************************************************/ => Execute(db => db.GeoRadius(key, member, radius, unit, count, order, options, flags) /*****************************************************************/ , (ex, caller) => $"{caller} {key}");
        public GeoRadiusResult[] /*******************/ GeoRadius(RedisKey key, double longitude, double latitude, double radius, GeoUnit unit = GeoUnit.Meters, int count = -1, Order? order = null, GeoRadiusOptions options = GeoRadiusOptions.Default, CommandFlags flags = CommandFlags.None) /*******************************************************************/ => Execute(db => db.GeoRadius(key, longitude, latitude, radius, unit, count, order, options, flags) /****************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<GeoRadiusResult[]> /*************/ GeoRadiusAsync(RedisKey key, RedisValue member, double radius, GeoUnit unit = GeoUnit.Meters, int count = -1, Order? order = null, GeoRadiusOptions options = GeoRadiusOptions.Default, CommandFlags flags = CommandFlags.None) /******************************************************************************/ => Execute(db => db.GeoRadiusAsync(key, member, radius, unit, count, order, options, flags) /************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<GeoRadiusResult[]> /*************/ GeoRadiusAsync(RedisKey key, double longitude, double latitude, double radius, GeoUnit unit = GeoUnit.Meters, int count = -1, Order? order = null, GeoRadiusOptions options = GeoRadiusOptions.Default, CommandFlags flags = CommandFlags.None) /**************************************************************/ => Execute(db => db.GeoRadiusAsync(key, longitude, latitude, radius, unit, count, order, options, flags) /***********************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ GeoRemove(RedisKey key, RedisValue member, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************************************************/ => Execute(db => db.GeoRemove(key, member, flags) /******************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ GeoRemoveAsync(RedisKey key, RedisValue member, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************************************************************************************/ => Execute(db => db.GeoRemoveAsync(key, member, flags) /*************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ HashDecrement(RedisKey key, RedisValue hashField, long value = 1, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************/ => Execute(db => db.HashDecrement(key, hashField, value, flags) /****************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public double /******************************/ HashDecrement(RedisKey key, RedisValue hashField, double value, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************************/ => Execute(db => db.HashDecrement(key, hashField, value, flags) /****************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ HashDecrementAsync(RedisKey key, RedisValue hashField, long value = 1, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************/ => Execute(db => db.HashDecrementAsync(key, hashField, value, flags) /***********************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<double> /************************/ HashDecrementAsync(RedisKey key, RedisValue hashField, double value, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************************************************************************************************/ => Execute(db => db.HashDecrementAsync(key, hashField, value, flags) /***********************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ HashDelete(RedisKey key, RedisValue hashField, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashDelete(key, hashField, flags) /**************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ HashDelete(RedisKey key, RedisValue[] hashFields, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashDelete(key, hashFields, flags) /*************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ HashDeleteAsync(RedisKey key, RedisValue hashField, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashDeleteAsync(key, hashField, flags) /*********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ HashDeleteAsync(RedisKey key, RedisValue[] hashFields, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashDeleteAsync(key, hashFields, flags) /********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ HashExists(RedisKey key, RedisValue hashField, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashExists(key, hashField, flags) /**************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ HashExistsAsync(RedisKey key, RedisValue hashField, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashExistsAsync(key, hashField, flags) /*********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue /**************************/ HashGet(RedisKey key, RedisValue hashField, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashGet(key, hashField, flags) /*****************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue[] /************************/ HashGet(RedisKey key, RedisValue[] hashFields, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashGet(key, hashFields, flags) /****************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public HashEntry[] /*************************/ HashGetAll(RedisKey key, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashGetAll(key, flags) /*************************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<HashEntry[]> /*******************/ HashGetAllAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashGetAllAsync(key, flags) /********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue> /********************/ HashGetAsync(RedisKey key, RedisValue hashField, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashGetAsync(key, hashField, flags) /************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue[]> /******************/ HashGetAsync(RedisKey key, RedisValue[] hashFields, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashGetAsync(key, hashFields, flags) /***********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Lease<byte> /*************************/ HashGetLease(RedisKey key, RedisValue hashField, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashGetLease(key, hashField, flags) /************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<Lease<byte>> /*******************/ HashGetLeaseAsync(RedisKey key, RedisValue hashField, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashGetLeaseAsync(key, hashField, flags) /*******************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ HashIncrement(RedisKey key, RedisValue hashField, long value = 1, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************/ => Execute(db => db.HashIncrement(key, hashField, value, flags) /****************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public double /******************************/ HashIncrement(RedisKey key, RedisValue hashField, double value, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************************/ => Execute(db => db.HashIncrement(key, hashField, value, flags) /****************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ HashIncrementAsync(RedisKey key, RedisValue hashField, long value = 1, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************/ => Execute(db => db.HashIncrementAsync(key, hashField, value, flags) /***********************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<double> /************************/ HashIncrementAsync(RedisKey key, RedisValue hashField, double value, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************************************************************************************************/ => Execute(db => db.HashIncrementAsync(key, hashField, value, flags) /***********************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue[] /************************/ HashKeys(RedisKey key, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashKeys(key, flags) /***************************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue[]> /******************/ HashKeysAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashKeysAsync(key, flags) /**********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ HashLength(RedisKey key, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashLength(key, flags) /*************************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ HashLengthAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashLengthAsync(key, flags) /********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public IEnumerable<HashEntry> /**************/ HashScan(RedisKey key, RedisValue pattern, int pageSize, CommandFlags flags) /*********************************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashScan(key, pattern, pageSize, flags) /********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public IEnumerable<HashEntry> /**************/ HashScan(RedisKey key, RedisValue pattern = default, int pageSize = 250, long cursor = 0, int pageOffset = 0, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************/ => Execute(db => db.HashScan(key, pattern, pageSize, cursor, pageOffset, flags) /************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public IAsyncEnumerable<HashEntry> /*********/ HashScanAsync(RedisKey key, RedisValue pattern = default, int pageSize = 250, long cursor = 0, int pageOffset = 0, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************/ => Execute(db => db.HashScanAsync(key, pattern, pageSize, cursor, pageOffset, flags) /*******************************************************************/ , (ex, caller) => $"{caller} {key}");
        public void /********************************/ HashSet(RedisKey key, HashEntry[] hashFields, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashSet(key, hashFields, flags) /****************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ HashSet(RedisKey key, RedisValue hashField, RedisValue value, When when = When.Always, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************/ => Execute(db => db.HashSet(key, hashField, value, when, flags) /****************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task /********************************/ HashSetAsync(RedisKey key, HashEntry[] hashFields, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashSetAsync(key, hashFields, flags) /***********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ HashSetAsync(RedisKey key, RedisValue hashField, RedisValue value, When when = When.Always, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************************************************/ => Execute(db => db.HashSetAsync(key, hashField, value, when, flags) /***********************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ HashStringLength(RedisKey key, RedisValue hashField, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashStringLength(key, hashField, flags) /********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ HashStringLengthAsync(RedisKey key, RedisValue hashField, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashStringLengthAsync(key, hashField, flags) /***************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue[] /************************/ HashValues(RedisKey key, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashValues(key, flags) /*************************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue[]> /******************/ HashValuesAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashValuesAsync(key, flags) /********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ HyperLogLogAdd(RedisKey key, RedisValue value, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************************************/ => Execute(db => db.HyperLogLogAdd(key, value, flags) /**************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ HyperLogLogAdd(RedisKey key, RedisValue[] values, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************************************************************/ => Execute(db => db.HyperLogLogAdd(key, values, flags) /*************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ HyperLogLogAddAsync(RedisKey key, RedisValue value, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************************************/ => Execute(db => db.HyperLogLogAddAsync(key, value, flags) /*********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ HyperLogLogAddAsync(RedisKey key, RedisValue[] values, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************************************/ => Execute(db => db.HyperLogLogAddAsync(key, values, flags) /********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ HyperLogLogLength(RedisKey key, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.HyperLogLogLength(key, flags) /******************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ HyperLogLogLength(RedisKey[] keys, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************************************************/ => Execute(db => db.HyperLogLogLength(keys, flags) /*****************************************************************************************************/ , (ex, caller) => $"{caller} ");
        public Task<long> /**************************/ HyperLogLogLengthAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************************************************************/ => Execute(db => db.HyperLogLogLengthAsync(key, flags) /*************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ HyperLogLogLengthAsync(RedisKey[] keys, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************************************************/ => Execute(db => db.HyperLogLogLengthAsync(keys, flags) /************************************************************************************************/ , (ex, caller) => $"{caller} ");
        public void /********************************/ HyperLogLogMerge(RedisKey destination, RedisKey first, RedisKey second, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************************************************************/ => Execute(db => db.HyperLogLogMerge(destination, first, second, flags) /********************************************************************************/ , (ex, caller) => $"{caller} ");
        public void /********************************/ HyperLogLogMerge(RedisKey destination, RedisKey[] sourceKeys, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************************************************/ => Execute(db => db.HyperLogLogMerge(destination, sourceKeys, flags) /***********************************************************************************/ , (ex, caller) => $"{caller} ");
        public Task /********************************/ HyperLogLogMergeAsync(RedisKey destination, RedisKey first, RedisKey second, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************/ => Execute(db => db.HyperLogLogMergeAsync(destination, first, second, flags) /***************************************************************************/ , (ex, caller) => $"{caller} ");
        public Task /********************************/ HyperLogLogMergeAsync(RedisKey destination, RedisKey[] sourceKeys, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************************/ => Execute(db => db.HyperLogLogMergeAsync(destination, sourceKeys, flags) /******************************************************************************/ , (ex, caller) => $"{caller} ");
        public EndPoint /****************************/ IdentifyEndpoint(RedisKey key = default, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************************************************/ => Execute(db => db.IdentifyEndpoint(key, flags) /*******************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<EndPoint> /**********************/ IdentifyEndpointAsync(RedisKey key = default, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************************************************/ => Execute(db => db.IdentifyEndpointAsync(key, flags) /**************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ IsConnected(RedisKey key, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.IsConnected(key, flags) /************************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ KeyDelete(RedisKey key, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyDelete(key, flags) /**************************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ KeyDelete(RedisKey[] keys, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyDelete(keys, flags) /*************************************************************************************************************/ , (ex, caller) => $"{caller} ");
        public Task<bool> /**************************/ KeyDeleteAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyDeleteAsync(key, flags) /*********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ KeyDeleteAsync(RedisKey[] keys, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyDeleteAsync(keys, flags) /********************************************************************************************************/ , (ex, caller) => $"{caller} ");
        public byte[] /******************************/ KeyDump(RedisKey key, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyDump(key, flags) /****************************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<byte[]> /************************/ KeyDumpAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyDumpAsync(key, flags) /***********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ KeyExists(RedisKey key, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyExists(key, flags) /**************************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ KeyExists(RedisKey[] keys, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyExists(keys, flags) /*************************************************************************************************************/ , (ex, caller) => $"{caller} ");
        public Task<bool> /**************************/ KeyExistsAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyExistsAsync(key, flags) /*********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ KeyExistsAsync(RedisKey[] keys, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyExistsAsync(keys, flags) /********************************************************************************************************/ , (ex, caller) => $"{caller} ");
        public bool /********************************/ KeyExpire(RedisKey key, TimeSpan? expiry, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyExpire(key, expiry, flags) /******************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ KeyExpire(RedisKey key, DateTime? expiry, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyExpire(key, expiry, flags) /******************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ KeyExpireAsync(RedisKey key, TimeSpan? expiry, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyExpireAsync(key, expiry, flags) /*************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ KeyExpireAsync(RedisKey key, DateTime? expiry, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyExpireAsync(key, expiry, flags) /*************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public TimeSpan? /***************************/ KeyIdleTime(RedisKey key, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyIdleTime(key, flags) /************************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<TimeSpan?> /*********************/ KeyIdleTimeAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyIdleTimeAsync(key, flags) /*******************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public void /********************************/ KeyMigrate(RedisKey key, EndPoint toServer, int toDatabase = 0, int timeoutMilliseconds = 0, MigrateOptions migrateOptions = MigrateOptions.None, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************/ => Execute(db => db.KeyMigrate(key, toServer, toDatabase, timeoutMilliseconds, migrateOptions, flags) /**************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task /********************************/ KeyMigrateAsync(RedisKey key, EndPoint toServer, int toDatabase = 0, int timeoutMilliseconds = 0, MigrateOptions migrateOptions = MigrateOptions.None, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************/ => Execute(db => db.KeyMigrateAsync(key, toServer, toDatabase, timeoutMilliseconds, migrateOptions, flags) /*********************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ KeyMove(RedisKey key, int database, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyMove(key, database, flags) /******************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ KeyMoveAsync(RedisKey key, int database, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyMoveAsync(key, database, flags) /*************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ KeyPersist(RedisKey key, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyPersist(key, flags) /*************************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ KeyPersistAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyPersistAsync(key, flags) /********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisKey /****************************/ KeyRandom(CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyRandom(flags) /*******************************************************************************************************************/ , (ex, caller) => $"{caller} ");
        public Task<RedisKey> /**********************/ KeyRandomAsync(CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyRandomAsync(flags) /**************************************************************************************************************/ , (ex, caller) => $"{caller} ");
        public bool /********************************/ KeyRename(RedisKey key, RedisKey newKey, When when = When.Always, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyRename(key, newKey, when, flags) /************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ KeyRenameAsync(RedisKey key, RedisKey newKey, When when = When.Always, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************/ => Execute(db => db.KeyRenameAsync(key, newKey, when, flags) /*******************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public void /********************************/ KeyRestore(RedisKey key, byte[] value, TimeSpan? expiry = null, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyRestore(key, value, expiry, flags) /**********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task /********************************/ KeyRestoreAsync(RedisKey key, byte[] value, TimeSpan? expiry = null, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyRestoreAsync(key, value, expiry, flags) /*****************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public TimeSpan? /***************************/ KeyTimeToLive(RedisKey key, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyTimeToLive(key, flags) /**********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<TimeSpan?> /*********************/ KeyTimeToLiveAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyTimeToLiveAsync(key, flags) /*****************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ KeyTouch(RedisKey key, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyTouch(key, flags) /***************************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ KeyTouch(RedisKey[] keys, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyTouch(keys, flags) /**************************************************************************************************************/ , (ex, caller) => $"{caller} ");
        public Task<bool> /**************************/ KeyTouchAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyTouchAsync(key, flags) /**********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ KeyTouchAsync(RedisKey[] keys, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyTouchAsync(keys, flags) /*********************************************************************************************************/ , (ex, caller) => $"{caller} ");
        public RedisType /***************************/ KeyType(RedisKey key, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyType(key, flags) /****************************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisType> /*********************/ KeyTypeAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyTypeAsync(key, flags) /***********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue /**************************/ ListGetByIndex(RedisKey key, long index, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************************************************/ => Execute(db => db.ListGetByIndex(key, index, flags) /**************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue> /********************/ ListGetByIndexAsync(RedisKey key, long index, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************************************************/ => Execute(db => db.ListGetByIndexAsync(key, index, flags) /*********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ ListInsertAfter(RedisKey key, RedisValue pivot, RedisValue value, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************/ => Execute(db => db.ListInsertAfter(key, pivot, value, flags) /******************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ ListInsertAfterAsync(RedisKey key, RedisValue pivot, RedisValue value, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************/ => Execute(db => db.ListInsertAfterAsync(key, pivot, value, flags) /*************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ ListInsertBefore(RedisKey key, RedisValue pivot, RedisValue value, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************************/ => Execute(db => db.ListInsertBefore(key, pivot, value, flags) /*****************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ ListInsertBeforeAsync(RedisKey key, RedisValue pivot, RedisValue value, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************************************************************/ => Execute(db => db.ListInsertBeforeAsync(key, pivot, value, flags) /************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue /**************************/ ListLeftPop(RedisKey key, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.ListLeftPop(key, flags) /************************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue[] /************************/ ListLeftPop(RedisKey key, long count, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************************************************************************/ => Execute(db => db.ListLeftPop(key, count, flags) /*****************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue> /********************/ ListLeftPopAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.ListLeftPopAsync(key, flags) /*******************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue[]> /******************/ ListLeftPopAsync(RedisKey key, long count, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************************************************/ => Execute(db => db.ListLeftPopAsync(key, count, flags) /************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ ListLeftPush(RedisKey key, RedisValue value, When when = When.Always, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************************/ => Execute(db => db.ListLeftPush(key, value, when, flags) /**********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ ListLeftPush(RedisKey key, RedisValue[] values, When when = When.Always, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************************/ => Execute(db => db.ListLeftPush(key, values, when, flags) /*********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ ListLeftPush(RedisKey key, RedisValue[] values, CommandFlags flags) /******************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.ListLeftPush(key, values, flags) /***************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ ListLeftPushAsync(RedisKey key, RedisValue value, When when = When.Always, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************************/ => Execute(db => db.ListLeftPushAsync(key, value, when, flags) /*****************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ ListLeftPushAsync(RedisKey key, RedisValue[] values, When when = When.Always, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************/ => Execute(db => db.ListLeftPushAsync(key, values, when, flags) /****************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ ListLeftPushAsync(RedisKey key, RedisValue[] values, CommandFlags flags) /*************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.ListLeftPushAsync(key, values, flags) /**********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ ListLength(RedisKey key, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.ListLength(key, flags) /*************************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ ListLengthAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.ListLengthAsync(key, flags) /********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue[] /************************/ ListRange(RedisKey key, long start = 0, long stop = -1, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************************************************************************************/ => Execute(db => db.ListRange(key, start, stop, flags) /*************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue[]> /******************/ ListRangeAsync(RedisKey key, long start = 0, long stop = -1, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************************************/ => Execute(db => db.ListRangeAsync(key, start, stop, flags) /********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ ListRemove(RedisKey key, RedisValue value, long count = 0, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************************/ => Execute(db => db.ListRemove(key, value, count, flags) /***********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ ListRemoveAsync(RedisKey key, RedisValue value, long count = 0, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************************/ => Execute(db => db.ListRemoveAsync(key, value, count, flags) /******************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue /**************************/ ListRightPop(RedisKey key, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.ListRightPop(key, flags) /***********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue[] /************************/ ListRightPop(RedisKey key, long count, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************************************************************/ => Execute(db => db.ListRightPop(key, count, flags) /****************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue> /********************/ ListRightPopAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.ListRightPopAsync(key, flags) /******************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue[]> /******************/ ListRightPopAsync(RedisKey key, long count, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************************************************************************************************/ => Execute(db => db.ListRightPopAsync(key, count, flags) /***********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue /**************************/ ListRightPopLeftPush(RedisKey source, RedisKey destination, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************************************************************************/ => Execute(db => db.ListRightPopLeftPush(source, destination, flags) /***********************************************************************************/ , (ex, caller) => $"{caller} ");
        public Task<RedisValue> /********************/ ListRightPopLeftPushAsync(RedisKey source, RedisKey destination, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************************/ => Execute(db => db.ListRightPopLeftPushAsync(source, destination, flags) /******************************************************************************/ , (ex, caller) => $"{caller} ");
        public long /********************************/ ListRightPush(RedisKey key, RedisValue value, When when = When.Always, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************/ => Execute(db => db.ListRightPush(key, value, when, flags) /*********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ ListRightPush(RedisKey key, RedisValue[] values, When when = When.Always, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************************************/ => Execute(db => db.ListRightPush(key, values, when, flags) /********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ ListRightPush(RedisKey key, RedisValue[] values, CommandFlags flags) /*****************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.ListRightPush(key, values, flags) /**************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ ListRightPushAsync(RedisKey key, RedisValue value, When when = When.Always, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************/ => Execute(db => db.ListRightPushAsync(key, value, when, flags) /****************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ ListRightPushAsync(RedisKey key, RedisValue[] values, When when = When.Always, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************/ => Execute(db => db.ListRightPushAsync(key, values, when, flags) /***************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ ListRightPushAsync(RedisKey key, RedisValue[] values, CommandFlags flags) /************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.ListRightPushAsync(key, values, flags) /*********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public void /********************************/ ListSetByIndex(RedisKey key, long index, RedisValue value, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************************/ => Execute(db => db.ListSetByIndex(key, index, value, flags) /*******************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task /********************************/ ListSetByIndexAsync(RedisKey key, long index, RedisValue value, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************************/ => Execute(db => db.ListSetByIndexAsync(key, index, value, flags) /**************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public void /********************************/ ListTrim(RedisKey key, long start, long stop, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************************************************/ => Execute(db => db.ListTrim(key, start, stop, flags) /**************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task /********************************/ ListTrimAsync(RedisKey key, long start, long stop, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************************************************/ => Execute(db => db.ListTrimAsync(key, start, stop, flags) /*********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ LockExtend(RedisKey key, RedisValue value, TimeSpan expiry, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************************************************************************/ => Execute(db => db.LockExtend(key, value, expiry, flags) /**********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ LockExtendAsync(RedisKey key, RedisValue value, TimeSpan expiry, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************************/ => Execute(db => db.LockExtendAsync(key, value, expiry, flags) /*****************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue /**************************/ LockQuery(RedisKey key, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.LockQuery(key, flags) /**************************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue> /********************/ LockQueryAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.LockQueryAsync(key, flags) /*********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ LockRelease(RedisKey key, RedisValue value, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************************************************************************************************/ => Execute(db => db.LockRelease(key, value, flags) /*****************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ LockReleaseAsync(RedisKey key, RedisValue value, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************************************************/ => Execute(db => db.LockReleaseAsync(key, value, flags) /************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ LockTake(RedisKey key, RedisValue value, TimeSpan expiry, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************************************/ => Execute(db => db.LockTake(key, value, expiry, flags) /************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ LockTakeAsync(RedisKey key, RedisValue value, TimeSpan expiry, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************************************/ => Execute(db => db.LockTakeAsync(key, value, expiry, flags) /*******************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public TimeSpan /****************************/ Ping(CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.Ping(flags) /************************************************************************************************************************/ , (ex, caller) => $"{caller} ");
        public Task<TimeSpan> /**********************/ PingAsync(CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.PingAsync(flags) /*******************************************************************************************************************/ , (ex, caller) => $"{caller} ");
        public long /********************************/ Publish(RedisChannel channel, RedisValue message, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************************************************************/ => Execute(db => db.Publish(channel, message, flags) /***************************************************************************************************/ , (ex, caller) => $"{caller} {channel}");
        public Task<long> /**************************/ PublishAsync(RedisChannel channel, RedisValue message, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************************************/ => Execute(db => db.PublishAsync(channel, message, flags) /**********************************************************************************************/ , (ex, caller) => $"{caller} ");
        public RedisResult /*************************/ ScriptEvaluate(string script, RedisKey[] keys = null, RedisValue[] values = null, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************/ => Execute(db => db.ScriptEvaluate(script, keys, values, flags) /****************************************************************************************/ , (ex, caller) => $"{caller} ");
        public RedisResult /*************************/ ScriptEvaluate(byte[] hash, RedisKey[] keys = null, RedisValue[] values = null, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************************************************************/ => Execute(db => db.ScriptEvaluate(hash, keys, values, flags) /******************************************************************************************/ , (ex, caller) => $"{caller} ");
        public RedisResult /*************************/ ScriptEvaluate(LuaScript script, object parameters = null, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************************/ => Execute(db => db.ScriptEvaluate(script, parameters, flags) /******************************************************************************************/ , (ex, caller) => $"{caller} ");
        public RedisResult /*************************/ ScriptEvaluate(LoadedLuaScript script, object parameters = null, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************************/ => Execute(db => db.ScriptEvaluate(script, parameters, flags) /******************************************************************************************/ , (ex, caller) => $"{caller} ");
        public Task<RedisResult> /*******************/ ScriptEvaluateAsync(string script, RedisKey[] keys = null, RedisValue[] values = null, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************/ => Execute(db => db.ScriptEvaluateAsync(script, keys, values, flags) /***********************************************************************************/ , (ex, caller) => $"{caller} ");
        public Task<RedisResult> /*******************/ ScriptEvaluateAsync(byte[] hash, RedisKey[] keys = null, RedisValue[] values = null, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************/ => Execute(db => db.ScriptEvaluateAsync(hash, keys, values, flags) /*************************************************************************************/ , (ex, caller) => $"{caller} ");
        public Task<RedisResult> /*******************/ ScriptEvaluateAsync(LuaScript script, object parameters = null, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************************/ => Execute(db => db.ScriptEvaluateAsync(script, parameters, flags) /*************************************************************************************/ , (ex, caller) => $"{caller} ");
        public Task<RedisResult> /*******************/ ScriptEvaluateAsync(LoadedLuaScript script, object parameters = null, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************************/ => Execute(db => db.ScriptEvaluateAsync(script, parameters, flags) /*************************************************************************************/ , (ex, caller) => $"{caller} ");
        public bool /********************************/ SetAdd(RedisKey key, RedisValue value, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetAdd(key, value, flags) /**********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ SetAdd(RedisKey key, RedisValue[] values, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetAdd(key, values, flags) /*********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ SetAddAsync(RedisKey key, RedisValue value, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetAddAsync(key, value, flags) /*****************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ SetAddAsync(RedisKey key, RedisValue[] values, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetAddAsync(key, values, flags) /****************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue[] /************************/ SetCombine(SetOperation operation, RedisKey first, RedisKey second, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************************************************************************/ => Execute(db => db.SetCombine(operation, first, second, flags) /****************************************************************************************/ , (ex, caller) => $"{caller} ");
        public RedisValue[] /************************/ SetCombine(SetOperation operation, RedisKey[] keys, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetCombine(operation, keys, flags) /*************************************************************************************************/ , (ex, caller) => $"{caller} ");
        public long /********************************/ SetCombineAndStore(SetOperation operation, RedisKey destination, RedisKey first, RedisKey second, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************/ => Execute(db => db.SetCombineAndStore(operation, destination, first, second, flags) /*******************************************************************/ , (ex, caller) => $"{caller} ");
        public long /********************************/ SetCombineAndStore(SetOperation operation, RedisKey destination, RedisKey[] keys, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************/ => Execute(db => db.SetCombineAndStore(operation, destination, keys, flags) /****************************************************************************/ , (ex, caller) => $"{caller} ");
        public Task<long> /**************************/ SetCombineAndStoreAsync(SetOperation operation, RedisKey destination, RedisKey first, RedisKey second, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************/ => Execute(db => db.SetCombineAndStoreAsync(operation, destination, first, second, flags) /**************************************************************/ , (ex, caller) => $"{caller} ");
        public Task<long> /**************************/ SetCombineAndStoreAsync(SetOperation operation, RedisKey destination, RedisKey[] keys, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************/ => Execute(db => db.SetCombineAndStoreAsync(operation, destination, keys, flags) /***********************************************************************/ , (ex, caller) => $"{caller} ");
        public Task<RedisValue[]> /******************/ SetCombineAsync(SetOperation operation, RedisKey first, RedisKey second, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************************/ => Execute(db => db.SetCombineAsync(operation, first, second, flags) /***********************************************************************************/ , (ex, caller) => $"{caller} ");
        public Task<RedisValue[]> /******************/ SetCombineAsync(SetOperation operation, RedisKey[] keys, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetCombineAsync(operation, keys, flags) /********************************************************************************************/ , (ex, caller) => $"{caller} ");
        public bool /********************************/ SetContains(RedisKey key, RedisValue value, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetContains(key, value, flags) /*****************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ SetContainsAsync(RedisKey key, RedisValue value, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetContainsAsync(key, value, flags) /************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ SetLength(RedisKey key, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetLength(key, flags) /**************************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ SetLengthAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetLengthAsync(key, flags) /*********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue[] /************************/ SetMembers(RedisKey key, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetMembers(key, flags) /*************************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue[]> /******************/ SetMembersAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetMembersAsync(key, flags) /********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ SetMove(RedisKey source, RedisKey destination, RedisValue value, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************************/ => Execute(db => db.SetMove(source, destination, value, flags) /*****************************************************************************************/ , (ex, caller) => $"{caller} ");
        public Task<bool> /**************************/ SetMoveAsync(RedisKey source, RedisKey destination, RedisValue value, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************************/ => Execute(db => db.SetMoveAsync(source, destination, value, flags) /************************************************************************************/ , (ex, caller) => $"{caller} ");
        public RedisValue /**************************/ SetPop(RedisKey key, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetPop(key, flags) /*****************************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue[] /************************/ SetPop(RedisKey key, long count, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetPop(key, count, flags) /**********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue> /********************/ SetPopAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetPopAsync(key, flags) /************************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue[]> /******************/ SetPopAsync(RedisKey key, long count, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetPopAsync(key, count, flags) /*****************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue /**************************/ SetRandomMember(RedisKey key, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetRandomMember(key, flags) /********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue> /********************/ SetRandomMemberAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetRandomMemberAsync(key, flags) /***************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue[] /************************/ SetRandomMembers(RedisKey key, long count, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetRandomMembers(key, count, flags) /************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue[]> /******************/ SetRandomMembersAsync(RedisKey key, long count, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetRandomMembersAsync(key, count, flags) /*******************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ SetRemove(RedisKey key, RedisValue value, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetRemove(key, value, flags) /*******************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ SetRemove(RedisKey key, RedisValue[] values, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetRemove(key, values, flags) /******************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ SetRemoveAsync(RedisKey key, RedisValue value, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetRemoveAsync(key, value, flags) /**************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ SetRemoveAsync(RedisKey key, RedisValue[] values, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetRemoveAsync(key, values, flags) /*************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public IEnumerable<RedisValue> /*************/ SetScan(RedisKey key, RedisValue pattern, int pageSize, CommandFlags flags) /**********************************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetScan(key, pattern, pageSize, flags) /*********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public IEnumerable<RedisValue> /*************/ SetScan(RedisKey key, RedisValue pattern = default, int pageSize = 250, long cursor = 0, int pageOffset = 0, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************/ => Execute(db => db.SetScan(key, pattern, pageSize, cursor, pageOffset, flags) /*************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public IAsyncEnumerable<RedisValue> /********/ SetScanAsync(RedisKey key, RedisValue pattern = default, int pageSize = 250, long cursor = 0, int pageOffset = 0, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************/ => Execute(db => db.SetScanAsync(key, pattern, pageSize, cursor, pageOffset, flags) /********************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue[] /************************/ Sort(RedisKey key, long skip = 0, long take = -1, Order order = Order.Ascending, SortType sortType = SortType.Numeric, RedisValue by = default, RedisValue[] get = null, CommandFlags flags = CommandFlags.None) /*********************************************************************************************/ => Execute(db => db.Sort(key, skip, take, order, sortType, by, get, flags) /*****************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ SortAndStore(RedisKey destination, RedisKey key, long skip = 0, long take = -1, Order order = Order.Ascending, SortType sortType = SortType.Numeric, RedisValue by = default, RedisValue[] get = null, CommandFlags flags = CommandFlags.None) /***************************************************************/ => Execute(db => db.SortAndStore(destination, key, skip, take, order, sortType, by, get, flags) /********************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ SortAndStoreAsync(RedisKey destination, RedisKey key, long skip = 0, long take = -1, Order order = Order.Ascending, SortType sortType = SortType.Numeric, RedisValue by = default, RedisValue[] get = null, CommandFlags flags = CommandFlags.None) /**********************************************************/ => Execute(db => db.SortAndStoreAsync(destination, key, skip, take, order, sortType, by, get, flags) /***************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue[]> /******************/ SortAsync(RedisKey key, long skip = 0, long take = -1, Order order = Order.Ascending, SortType sortType = SortType.Numeric, RedisValue by = default, RedisValue[] get = null, CommandFlags flags = CommandFlags.None) /****************************************************************************************/ => Execute(db => db.SortAsync(key, skip, take, order, sortType, by, get, flags) /************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ SortedSetAdd(RedisKey key, RedisValue member, double score, CommandFlags flags) /******************************************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetAdd(key, member, score, flags) /********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ SortedSetAdd(RedisKey key, RedisValue member, double score, When when = When.Always, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetAdd(key, member, score, when, flags) /**************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ SortedSetAdd(RedisKey key, SortedSetEntry[] values, CommandFlags flags) /**************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetAdd(key, values, flags) /***************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ SortedSetAdd(RedisKey key, SortedSetEntry[] values, When when = When.Always, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetAdd(key, values, when, flags) /*********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ SortedSetAddAsync(RedisKey key, RedisValue member, double score, CommandFlags flags) /*************************************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetAddAsync(key, member, score, flags) /***************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ SortedSetAddAsync(RedisKey key, RedisValue member, double score, When when = When.Always, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetAddAsync(key, member, score, when, flags) /*********************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ SortedSetAddAsync(RedisKey key, SortedSetEntry[] values, CommandFlags flags) /*********************************************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetAddAsync(key, values, flags) /**********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ SortedSetAddAsync(RedisKey key, SortedSetEntry[] values, When when = When.Always, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetAddAsync(key, values, when, flags) /****************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ SortedSetCombineAndStore(SetOperation operation, RedisKey destination, RedisKey first, RedisKey second, Aggregate aggregate = Aggregate.Sum, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************************/ => Execute(db => db.SortedSetCombineAndStore(operation, destination, first, second, aggregate, flags) /**************************************************/ , (ex, caller) => $"{caller} ");
        public long /********************************/ SortedSetCombineAndStore(SetOperation operation, RedisKey destination, RedisKey[] keys, double[] weights = null, Aggregate aggregate = Aggregate.Sum, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************/ => Execute(db => db.SortedSetCombineAndStore(operation, destination, keys, weights, aggregate, flags) /**************************************************/ , (ex, caller) => $"{caller} ");
        public Task<long> /**************************/ SortedSetCombineAndStoreAsync(SetOperation operation, RedisKey destination, RedisKey first, RedisKey second, Aggregate aggregate = Aggregate.Sum, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************/ => Execute(db => db.SortedSetCombineAndStoreAsync(operation, destination, first, second, aggregate, flags) /*********************************************/ , (ex, caller) => $"{caller} ");
        public Task<long> /**************************/ SortedSetCombineAndStoreAsync(SetOperation operation, RedisKey destination, RedisKey[] keys, double[] weights = null, Aggregate aggregate = Aggregate.Sum, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************/ => Execute(db => db.SortedSetCombineAndStoreAsync(operation, destination, keys, weights, aggregate, flags) /*********************************************/ , (ex, caller) => $"{caller} ");
        public double /******************************/ SortedSetDecrement(RedisKey key, RedisValue member, double value, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetDecrement(key, member, value, flags) /**************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<double> /************************/ SortedSetDecrementAsync(RedisKey key, RedisValue member, double value, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetDecrementAsync(key, member, value, flags) /*********************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public double /******************************/ SortedSetIncrement(RedisKey key, RedisValue member, double value, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetIncrement(key, member, value, flags) /**************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<double> /************************/ SortedSetIncrementAsync(RedisKey key, RedisValue member, double value, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetIncrementAsync(key, member, value, flags) /*********************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ SortedSetLength(RedisKey key, double min = double.NegativeInfinity, double max = double.PositiveInfinity, Exclude exclude = Exclude.None, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************/ => Execute(db => db.SortedSetLength(key, min, max, exclude, flags) /*************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ SortedSetLengthAsync(RedisKey key, double min = double.NegativeInfinity, double max = double.PositiveInfinity, Exclude exclude = Exclude.None, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************/ => Execute(db => db.SortedSetLengthAsync(key, min, max, exclude, flags) /********************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ SortedSetLengthByValue(RedisKey key, RedisValue min, RedisValue max, Exclude exclude = Exclude.None, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************/ => Execute(db => db.SortedSetLengthByValue(key, min, max, exclude, flags) /******************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ SortedSetLengthByValueAsync(RedisKey key, RedisValue min, RedisValue max, Exclude exclude = Exclude.None, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************/ => Execute(db => db.SortedSetLengthByValueAsync(key, min, max, exclude, flags) /*************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public SortedSetEntry? /*********************/ SortedSetPop(RedisKey key, Order order = Order.Ascending, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetPop(key, order, flags) /****************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public SortedSetEntry[] /********************/ SortedSetPop(RedisKey key, long count, Order order = Order.Ascending, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetPop(key, count, order, flags) /*********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<SortedSetEntry?> /***************/ SortedSetPopAsync(RedisKey key, Order order = Order.Ascending, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetPopAsync(key, order, flags) /***********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<SortedSetEntry[]> /**************/ SortedSetPopAsync(RedisKey key, long count, Order order = Order.Ascending, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetPopAsync(key, count, order, flags) /****************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ SortedSetRangeAndStore(RedisKey sourceKey, RedisKey destinationKey, RedisValue start, RedisValue stop, SortedSetOrder sortedSetOrder = SortedSetOrder.ByRank, Exclude exclude = Exclude.None, Order order = Order.Ascending, long skip = 0, long? take = null, CommandFlags flags = CommandFlags.None) /*******/ => Execute(db => db.SortedSetRangeAndStore(sourceKey, destinationKey, start, stop, sortedSetOrder, exclude, order, skip, take, flags) /******************/ , (ex, caller) => $"{caller} ");
        public Task<long> /**************************/ SortedSetRangeAndStoreAsync(RedisKey sourceKey, RedisKey destinationKey, RedisValue start, RedisValue stop, SortedSetOrder sortedSetOrder = SortedSetOrder.ByRank, Exclude exclude = Exclude.None, Order order = Order.Ascending, long skip = 0, long? take = null, CommandFlags flags = CommandFlags.None) /**/ => Execute(db => db.SortedSetRangeAndStoreAsync(sourceKey, destinationKey, start, stop, sortedSetOrder, exclude, order, skip, take, flags) /*************/ , (ex, caller) => $"{caller} ");
        public RedisValue[] /************************/ SortedSetRangeByRank(RedisKey key, long start = 0, long stop = -1, Order order = Order.Ascending, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************/ => Execute(db => db.SortedSetRangeByRank(key, start, stop, order, flags) /*******************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue[]> /******************/ SortedSetRangeByRankAsync(RedisKey key, long start = 0, long stop = -1, Order order = Order.Ascending, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************/ => Execute(db => db.SortedSetRangeByRankAsync(key, start, stop, order, flags) /**************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public SortedSetEntry[] /********************/ SortedSetRangeByRankWithScores(RedisKey key, long start = 0, long stop = -1, Order order = Order.Ascending, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************************/ => Execute(db => db.SortedSetRangeByRankWithScores(key, start, stop, order, flags) /*********************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<SortedSetEntry[]> /**************/ SortedSetRangeByRankWithScoresAsync(RedisKey key, long start = 0, long stop = -1, Order order = Order.Ascending, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************/ => Execute(db => db.SortedSetRangeByRankWithScoresAsync(key, start, stop, order, flags) /****************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue[] /************************/ SortedSetRangeByScore(RedisKey key, double start = double.NegativeInfinity, double stop = double.PositiveInfinity, Exclude exclude = Exclude.None, Order order = Order.Ascending, long skip = 0, long take = -1, CommandFlags flags = CommandFlags.None) /*****************************************************/ => Execute(db => db.SortedSetRangeByScore(key, start, stop, exclude, order, skip, take, flags) /*********************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue[]> /******************/ SortedSetRangeByScoreAsync(RedisKey key, double start = double.NegativeInfinity, double stop = double.PositiveInfinity, Exclude exclude = Exclude.None, Order order = Order.Ascending, long skip = 0, long take = -1, CommandFlags flags = CommandFlags.None) /************************************************/ => Execute(db => db.SortedSetRangeByScoreAsync(key, start, stop, exclude, order, skip, take, flags) /****************************************************/ , (ex, caller) => $"{caller} {key}");
        public SortedSetEntry[] /********************/ SortedSetRangeByScoreWithScores(RedisKey key, double start = double.NegativeInfinity, double stop = double.PositiveInfinity, Exclude exclude = Exclude.None, Order order = Order.Ascending, long skip = 0, long take = -1, CommandFlags flags = CommandFlags.None) /*******************************************/ => Execute(db => db.SortedSetRangeByScoreWithScores(key, start, stop, exclude, order, skip, take, flags) /***********************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<SortedSetEntry[]> /**************/ SortedSetRangeByScoreWithScoresAsync(RedisKey key, double start = double.NegativeInfinity, double stop = double.PositiveInfinity, Exclude exclude = Exclude.None, Order order = Order.Ascending, long skip = 0, long take = -1, CommandFlags flags = CommandFlags.None) /**************************************/ => Execute(db => db.SortedSetRangeByScoreWithScoresAsync(key, start, stop, exclude, order, skip, take, flags) /******************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue[] /************************/ SortedSetRangeByValue(RedisKey key, RedisValue min, RedisValue max, Exclude exclude, long skip, long take = -1, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************/ => Execute(db => db.SortedSetRangeByValue(key, min, max, exclude, skip, take, flags) /*******************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue[] /************************/ SortedSetRangeByValue(RedisKey key, RedisValue min = default, RedisValue max = default, Exclude exclude = Exclude.None, Order order = Order.Ascending, long skip = 0, long take = -1, CommandFlags flags = CommandFlags.None) /********************************************************************************/ => Execute(db => db.SortedSetRangeByValue(key, min, max, exclude, order, skip, take, flags) /************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue[]> /******************/ SortedSetRangeByValueAsync(RedisKey key, RedisValue min, RedisValue max, Exclude exclude, long skip, long take = -1, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************************************************/ => Execute(db => db.SortedSetRangeByValueAsync(key, min, max, exclude, skip, take, flags) /**************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue[]> /******************/ SortedSetRangeByValueAsync(RedisKey key, RedisValue min = default, RedisValue max = default, Exclude exclude = Exclude.None, Order order = Order.Ascending, long skip = 0, long take = -1, CommandFlags flags = CommandFlags.None) /***************************************************************************/ => Execute(db => db.SortedSetRangeByValueAsync(key, min, max, exclude, order, skip, take, flags) /*******************************************************/ , (ex, caller) => $"{caller} {key}");
        public long? /*******************************/ SortedSetRank(RedisKey key, RedisValue member, Order order = Order.Ascending, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetRank(key, member, order, flags) /*******************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long?> /*************************/ SortedSetRankAsync(RedisKey key, RedisValue member, Order order = Order.Ascending, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetRankAsync(key, member, order, flags) /**************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ SortedSetRemove(RedisKey key, RedisValue member, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetRemove(key, member, flags) /************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ SortedSetRemove(RedisKey key, RedisValue[] members, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetRemove(key, members, flags) /***********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ SortedSetRemoveAsync(RedisKey key, RedisValue member, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetRemoveAsync(key, member, flags) /*******************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ SortedSetRemoveAsync(RedisKey key, RedisValue[] members, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetRemoveAsync(key, members, flags) /******************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ SortedSetRemoveRangeByRank(RedisKey key, long start, long stop, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetRemoveRangeByRank(key, start, stop, flags) /********************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ SortedSetRemoveRangeByRankAsync(RedisKey key, long start, long stop, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetRemoveRangeByRankAsync(key, start, stop, flags) /***************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ SortedSetRemoveRangeByScore(RedisKey key, double start, double stop, Exclude exclude = Exclude.None, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************/ => Execute(db => db.SortedSetRemoveRangeByScore(key, start, stop, exclude, flags) /**********************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ SortedSetRemoveRangeByScoreAsync(RedisKey key, double start, double stop, Exclude exclude = Exclude.None, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************/ => Execute(db => db.SortedSetRemoveRangeByScoreAsync(key, start, stop, exclude, flags) /*****************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ SortedSetRemoveRangeByValue(RedisKey key, RedisValue min, RedisValue max, Exclude exclude = Exclude.None, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************/ => Execute(db => db.SortedSetRemoveRangeByValue(key, min, max, exclude, flags) /*************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ SortedSetRemoveRangeByValueAsync(RedisKey key, RedisValue min, RedisValue max, Exclude exclude = Exclude.None, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************/ => Execute(db => db.SortedSetRemoveRangeByValueAsync(key, min, max, exclude, flags) /********************************************************************/ , (ex, caller) => $"{caller} {key}");
        public IEnumerable<SortedSetEntry> /*********/ SortedSetScan(RedisKey key, RedisValue pattern, int pageSize, CommandFlags flags) /****************************************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetScan(key, pattern, pageSize, flags) /***************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public IEnumerable<SortedSetEntry> /*********/ SortedSetScan(RedisKey key, RedisValue pattern = default, int pageSize = 250, long cursor = 0, int pageOffset = 0, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************/ => Execute(db => db.SortedSetScan(key, pattern, pageSize, cursor, pageOffset, flags) /*******************************************************************/ , (ex, caller) => $"{caller} {key}");
        public IAsyncEnumerable<SortedSetEntry> /****/ SortedSetScanAsync(RedisKey key, RedisValue pattern = default, int pageSize = 250, long cursor = 0, int pageOffset = 0, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************/ => Execute(db => db.SortedSetScanAsync(key, pattern, pageSize, cursor, pageOffset, flags) /**************************************************************/ , (ex, caller) => $"{caller} {key}");
        public double? /*****************************/ SortedSetScore(RedisKey key, RedisValue member, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetScore(key, member, flags) /*************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<double?> /***********************/ SortedSetScoreAsync(RedisKey key, RedisValue member, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetScoreAsync(key, member, flags) /********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ StreamAcknowledge(RedisKey key, RedisValue groupName, RedisValue messageId, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************/ => Execute(db => db.StreamAcknowledge(key, groupName, messageId, flags) /********************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ StreamAcknowledge(RedisKey key, RedisValue groupName, RedisValue[] messageIds, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************/ => Execute(db => db.StreamAcknowledge(key, groupName, messageIds, flags) /*******************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ StreamAcknowledgeAsync(RedisKey key, RedisValue groupName, RedisValue messageId, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************************************************************************************/ => Execute(db => db.StreamAcknowledgeAsync(key, groupName, messageId, flags) /***************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ StreamAcknowledgeAsync(RedisKey key, RedisValue groupName, RedisValue[] messageIds, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************************************************/ => Execute(db => db.StreamAcknowledgeAsync(key, groupName, messageIds, flags) /**************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue /**************************/ StreamAdd(RedisKey key, RedisValue streamField, RedisValue streamValue, RedisValue? messageId = null, int? maxLength = null, bool useApproximateMaxLength = false, CommandFlags flags = CommandFlags.None) /***************************************************************************************************/ => Execute(db => db.StreamAdd(key, streamField, streamValue, messageId, maxLength, useApproximateMaxLength, flags) /*************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue /**************************/ StreamAdd(RedisKey key, NameValueEntry[] streamPairs, RedisValue? messageId = null, int? maxLength = null, bool useApproximateMaxLength = false, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************/ => Execute(db => db.StreamAdd(key, streamPairs, messageId, maxLength, useApproximateMaxLength, flags) /**************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue> /********************/ StreamAddAsync(RedisKey key, RedisValue streamField, RedisValue streamValue, RedisValue? messageId = null, int? maxLength = null, bool useApproximateMaxLength = false, CommandFlags flags = CommandFlags.None) /**********************************************************************************************/ => Execute(db => db.StreamAddAsync(key, streamField, streamValue, messageId, maxLength, useApproximateMaxLength, flags) /********************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue> /********************/ StreamAddAsync(RedisKey key, NameValueEntry[] streamPairs, RedisValue? messageId = null, int? maxLength = null, bool useApproximateMaxLength = false, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************/ => Execute(db => db.StreamAddAsync(key, streamPairs, messageId, maxLength, useApproximateMaxLength, flags) /*********************************************/ , (ex, caller) => $"{caller} {key}");
        public StreamEntry[] /***********************/ StreamClaim(RedisKey key, RedisValue consumerGroup, RedisValue claimingConsumer, long minIdleTimeInMs, RedisValue[] messageIds, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************/ => Execute(db => db.StreamClaim(key, consumerGroup, claimingConsumer, minIdleTimeInMs, messageIds, flags) /**********************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<StreamEntry[]> /*****************/ StreamClaimAsync(RedisKey key, RedisValue consumerGroup, RedisValue claimingConsumer, long minIdleTimeInMs, RedisValue[] messageIds, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************/ => Execute(db => db.StreamClaimAsync(key, consumerGroup, claimingConsumer, minIdleTimeInMs, messageIds, flags) /*****************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue[] /************************/ StreamClaimIdsOnly(RedisKey key, RedisValue consumerGroup, RedisValue claimingConsumer, long minIdleTimeInMs, RedisValue[] messageIds, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************/ => Execute(db => db.StreamClaimIdsOnly(key, consumerGroup, claimingConsumer, minIdleTimeInMs, messageIds, flags) /***************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue[]> /******************/ StreamClaimIdsOnlyAsync(RedisKey key, RedisValue consumerGroup, RedisValue claimingConsumer, long minIdleTimeInMs, RedisValue[] messageIds, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************/ => Execute(db => db.StreamClaimIdsOnlyAsync(key, consumerGroup, claimingConsumer, minIdleTimeInMs, messageIds, flags) /**********************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ StreamConsumerGroupSetPosition(RedisKey key, RedisValue groupName, RedisValue position, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************/ => Execute(db => db.StreamConsumerGroupSetPosition(key, groupName, position, flags) /********************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ StreamConsumerGroupSetPositionAsync(RedisKey key, RedisValue groupName, RedisValue position, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************************************************************************/ => Execute(db => db.StreamConsumerGroupSetPositionAsync(key, groupName, position, flags) /***************************************************************/ , (ex, caller) => $"{caller} {key}");
        public StreamConsumerInfo[] /****************/ StreamConsumerInfo(RedisKey key, RedisValue groupName, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************************************/ => Execute(db => db.StreamConsumerInfo(key, groupName, flags) /******************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<StreamConsumerInfo[]> /**********/ StreamConsumerInfoAsync(RedisKey key, RedisValue groupName, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************************************************************************/ => Execute(db => db.StreamConsumerInfoAsync(key, groupName, flags) /*************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ StreamCreateConsumerGroup(RedisKey key, RedisValue groupName, RedisValue? position, CommandFlags flags) /******************************************************************************************************************************************************************************************************/ => Execute(db => db.StreamCreateConsumerGroup(key, groupName, position, flags) /*************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ StreamCreateConsumerGroup(RedisKey key, RedisValue groupName, RedisValue? position = null, bool createStream = true, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************************************************/ => Execute(db => db.StreamCreateConsumerGroup(key, groupName, position, createStream, flags) /***********************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ StreamCreateConsumerGroupAsync(RedisKey key, RedisValue groupName, RedisValue? position, CommandFlags flags) /*************************************************************************************************************************************************************************************************/ => Execute(db => db.StreamCreateConsumerGroupAsync(key, groupName, position, flags) /********************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ StreamCreateConsumerGroupAsync(RedisKey key, RedisValue groupName, RedisValue? position = null, bool createStream = true, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************/ => Execute(db => db.StreamCreateConsumerGroupAsync(key, groupName, position, createStream, flags) /******************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ StreamDelete(RedisKey key, RedisValue[] messageIds, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************************************/ => Execute(db => db.StreamDelete(key, messageIds, flags) /***********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ StreamDeleteAsync(RedisKey key, RedisValue[] messageIds, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************************************************************************************************************/ => Execute(db => db.StreamDeleteAsync(key, messageIds, flags) /******************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ StreamDeleteConsumer(RedisKey key, RedisValue groupName, RedisValue consumerName, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************/ => Execute(db => db.StreamDeleteConsumer(key, groupName, consumerName, flags) /**************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ StreamDeleteConsumerAsync(RedisKey key, RedisValue groupName, RedisValue consumerName, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************/ => Execute(db => db.StreamDeleteConsumerAsync(key, groupName, consumerName, flags) /*********************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ StreamDeleteConsumerGroup(RedisKey key, RedisValue groupName, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************************************************/ => Execute(db => db.StreamDeleteConsumerGroup(key, groupName, flags) /***********************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ StreamDeleteConsumerGroupAsync(RedisKey key, RedisValue groupName, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************************/ => Execute(db => db.StreamDeleteConsumerGroupAsync(key, groupName, flags) /******************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public StreamGroupInfo[] /*******************/ StreamGroupInfo(RedisKey key, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StreamGroupInfo(key, flags) /********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<StreamGroupInfo[]> /*************/ StreamGroupInfoAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StreamGroupInfoAsync(key, flags) /***************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public StreamInfo /**************************/ StreamInfo(RedisKey key, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StreamInfo(key, flags) /*************************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<StreamInfo> /********************/ StreamInfoAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StreamInfoAsync(key, flags) /********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ StreamLength(RedisKey key, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StreamLength(key, flags) /***********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ StreamLengthAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StreamLengthAsync(key, flags) /******************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public StreamPendingInfo /*******************/ StreamPending(RedisKey key, RedisValue groupName, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************************************************************/ => Execute(db => db.StreamPending(key, groupName, flags) /***********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<StreamPendingInfo> /*************/ StreamPendingAsync(RedisKey key, RedisValue groupName, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************************************/ => Execute(db => db.StreamPendingAsync(key, groupName, flags) /******************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public StreamPendingMessageInfo[] /**********/ StreamPendingMessages(RedisKey key, RedisValue groupName, int count, RedisValue consumerName, RedisValue? minId = null, RedisValue? maxId = null, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************/ => Execute(db => db.StreamPendingMessages(key, groupName, count, consumerName, minId, maxId, flags) /****************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<StreamPendingMessageInfo[]> /****/ StreamPendingMessagesAsync(RedisKey key, RedisValue groupName, int count, RedisValue consumerName, RedisValue? minId = null, RedisValue? maxId = null, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************/ => Execute(db => db.StreamPendingMessagesAsync(key, groupName, count, consumerName, minId, maxId, flags) /***********************************************/ , (ex, caller) => $"{caller} {key}");
        public StreamEntry[] /***********************/ StreamRange(RedisKey key, RedisValue? minId = null, RedisValue? maxId = null, int? count = null, Order messageOrder = Order.Ascending, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************/ => Execute(db => db.StreamRange(key, minId, maxId, count, messageOrder, flags) /*************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<StreamEntry[]> /*****************/ StreamRangeAsync(RedisKey key, RedisValue? minId = null, RedisValue? maxId = null, int? count = null, Order messageOrder = Order.Ascending, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************/ => Execute(db => db.StreamRangeAsync(key, minId, maxId, count, messageOrder, flags) /********************************************************************/ , (ex, caller) => $"{caller} {key}");
        public StreamEntry[] /***********************/ StreamRead(RedisKey key, RedisValue position, int? count = null, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************************/ => Execute(db => db.StreamRead(key, position, count, flags) /********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisStream[] /***********************/ StreamRead(StreamPosition[] streamPositions, int? countPerStream = null, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************************/ => Execute(db => db.StreamRead(streamPositions, countPerStream, flags) /*********************************************************************************/ , (ex, caller) => $"{caller} ");
        public Task<StreamEntry[]> /*****************/ StreamReadAsync(RedisKey key, RedisValue position, int? count = null, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************************/ => Execute(db => db.StreamReadAsync(key, position, count, flags) /***************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisStream[]> /*****************/ StreamReadAsync(StreamPosition[] streamPositions, int? countPerStream = null, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************/ => Execute(db => db.StreamReadAsync(streamPositions, countPerStream, flags) /****************************************************************************/ , (ex, caller) => $"{caller} ");
        public StreamEntry[] /***********************/ StreamReadGroup(RedisKey key, RedisValue groupName, RedisValue consumerName, RedisValue? position, int? count, CommandFlags flags) /***************************************************************************************************************************************************************************/ => Execute(db => db.StreamReadGroup(key, groupName, consumerName, position, count, flags) /**************************************************************/ , (ex, caller) => $"{caller} {key}");
        public StreamEntry[] /***********************/ StreamReadGroup(RedisKey key, RedisValue groupName, RedisValue consumerName, RedisValue? position = null, int? count = null, bool noAck = false, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************/ => Execute(db => db.StreamReadGroup(key, groupName, consumerName, position, count, noAck, flags) /*******************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisStream[] /***********************/ StreamReadGroup(StreamPosition[] streamPositions, RedisValue groupName, RedisValue consumerName, int? countPerStream, CommandFlags flags) /********************************************************************************************************************************************************************/ => Execute(db => db.StreamReadGroup(streamPositions, groupName, consumerName, countPerStream, flags) /***************************************************/ , (ex, caller) => $"{caller} ");
        public RedisStream[] /***********************/ StreamReadGroup(StreamPosition[] streamPositions, RedisValue groupName, RedisValue consumerName, int? countPerStream = null, bool noAck = false, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************/ => Execute(db => db.StreamReadGroup(streamPositions, groupName, consumerName, countPerStream, noAck, flags) /********************************************/ , (ex, caller) => $"{caller} ");
        public Task<StreamEntry[]> /*****************/ StreamReadGroupAsync(RedisKey key, RedisValue groupName, RedisValue consumerName, RedisValue? position, int? count, CommandFlags flags) /**********************************************************************************************************************************************************************/ => Execute(db => db.StreamReadGroupAsync(key, groupName, consumerName, position, count, flags) /*********************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<StreamEntry[]> /*****************/ StreamReadGroupAsync(RedisKey key, RedisValue groupName, RedisValue consumerName, RedisValue? position = null, int? count = null, bool noAck = false, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************/ => Execute(db => db.StreamReadGroupAsync(key, groupName, consumerName, position, count, noAck, flags) /**************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisStream[]> /*****************/ StreamReadGroupAsync(StreamPosition[] streamPositions, RedisValue groupName, RedisValue consumerName, int? countPerStream, CommandFlags flags) /***************************************************************************************************************************************************************/ => Execute(db => db.StreamReadGroupAsync(streamPositions, groupName, consumerName, countPerStream, flags) /**********************************************/ , (ex, caller) => $"{caller} ");
        public Task<RedisStream[]> /*****************/ StreamReadGroupAsync(StreamPosition[] streamPositions, RedisValue groupName, RedisValue consumerName, int? countPerStream = null, bool noAck = false, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************/ => Execute(db => db.StreamReadGroupAsync(streamPositions, groupName, consumerName, countPerStream, noAck, flags) /***************************************/ , (ex, caller) => $"{caller} ");
        public long /********************************/ StreamTrim(RedisKey key, int maxLength, bool useApproximateMaxLength = false, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************/ => Execute(db => db.StreamTrim(key, maxLength, useApproximateMaxLength, flags) /*************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ StreamTrimAsync(RedisKey key, int maxLength, bool useApproximateMaxLength = false, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************/ => Execute(db => db.StreamTrimAsync(key, maxLength, useApproximateMaxLength, flags) /********************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ StringAppend(RedisKey key, RedisValue value, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringAppend(key, value, flags) /****************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ StringAppendAsync(RedisKey key, RedisValue value, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringAppendAsync(key, value, flags) /***********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ StringBitCount(RedisKey key, long start = 0, long end = -1, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************************************************************************/ => Execute(db => db.StringBitCount(key, start, end, flags) /*********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ StringBitCountAsync(RedisKey key, long start = 0, long end = -1, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************************/ => Execute(db => db.StringBitCountAsync(key, start, end, flags) /****************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ StringBitOperation(Bitwise operation, RedisKey destination, RedisKey first, RedisKey second = default, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************/ => Execute(db => db.StringBitOperation(operation, destination, first, second, flags) /*******************************************************************/ , (ex, caller) => $"{caller} ");
        public long /********************************/ StringBitOperation(Bitwise operation, RedisKey destination, RedisKey[] keys, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************/ => Execute(db => db.StringBitOperation(operation, destination, keys, flags) /****************************************************************************/ , (ex, caller) => $"{caller} ");
        public Task<long> /**************************/ StringBitOperationAsync(Bitwise operation, RedisKey destination, RedisKey first, RedisKey second = default, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************************/ => Execute(db => db.StringBitOperationAsync(operation, destination, first, second, flags) /**************************************************************/ , (ex, caller) => $"{caller} ");
        public Task<long> /**************************/ StringBitOperationAsync(Bitwise operation, RedisKey destination, RedisKey[] keys, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************/ => Execute(db => db.StringBitOperationAsync(operation, destination, keys, flags) /***********************************************************************/ , (ex, caller) => $"{caller} ");
        public long /********************************/ StringBitPosition(RedisKey key, bool bit, long start = 0, long end = -1, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************************/ => Execute(db => db.StringBitPosition(key, bit, start, end, flags) /*************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ StringBitPositionAsync(RedisKey key, bool bit, long start = 0, long end = -1, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************/ => Execute(db => db.StringBitPositionAsync(key, bit, start, end, flags) /********************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ StringDecrement(RedisKey key, long value = 1, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringDecrement(key, value, flags) /*************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public double /******************************/ StringDecrement(RedisKey key, double value, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringDecrement(key, value, flags) /*************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ StringDecrementAsync(RedisKey key, long value = 1, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringDecrementAsync(key, value, flags) /********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<double> /************************/ StringDecrementAsync(RedisKey key, double value, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringDecrementAsync(key, value, flags) /********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ StringGetBit(RedisKey key, long offset, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringGetBit(key, offset, flags) /***************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ StringGetBitAsync(RedisKey key, long offset, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringGetBitAsync(key, offset, flags) /**********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue /**************************/ StringGetDelete(RedisKey key, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringGetDelete(key, flags) /********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue> /********************/ StringGetDeleteAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringGetDeleteAsync(key, flags) /***************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Lease<byte> /*************************/ StringGetLease(RedisKey key, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringGetLease(key, flags) /*********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<Lease<byte>> /*******************/ StringGetLeaseAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringGetLeaseAsync(key, flags) /****************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue /**************************/ StringGetRange(RedisKey key, long start, long end, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringGetRange(key, start, end, flags) /*********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue> /********************/ StringGetRangeAsync(RedisKey key, long start, long end, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringGetRangeAsync(key, start, end, flags) /****************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue /**************************/ StringGetSet(RedisKey key, RedisValue value, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringGetSet(key, value, flags) /****************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue> /********************/ StringGetSetAsync(RedisKey key, RedisValue value, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringGetSetAsync(key, value, flags) /***********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue /**************************/ StringGetSetExpiry(RedisKey key, TimeSpan? expiry, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringGetSetExpiry(key, expiry, flags) /*********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue /**************************/ StringGetSetExpiry(RedisKey key, DateTime expiry, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringGetSetExpiry(key, expiry, flags) /*********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue> /********************/ StringGetSetExpiryAsync(RedisKey key, TimeSpan? expiry, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringGetSetExpiryAsync(key, expiry, flags) /****************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue> /********************/ StringGetSetExpiryAsync(RedisKey key, DateTime expiry, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringGetSetExpiryAsync(key, expiry, flags) /****************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValueWithExpiry /****************/ StringGetWithExpiry(RedisKey key, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringGetWithExpiry(key, flags) /****************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValueWithExpiry> /**********/ StringGetWithExpiryAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringGetWithExpiryAsync(key, flags) /***********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ StringIncrement(RedisKey key, long value = 1, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringIncrement(key, value, flags) /*************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public double /******************************/ StringIncrement(RedisKey key, double value, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringIncrement(key, value, flags) /*************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ StringIncrementAsync(RedisKey key, long value = 1, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringIncrementAsync(key, value, flags) /********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<double> /************************/ StringIncrementAsync(RedisKey key, double value, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringIncrementAsync(key, value, flags) /********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ StringLength(RedisKey key, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringLength(key, flags) /***********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ StringLengthAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringLengthAsync(key, flags) /******************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue /**************************/ StringSetAndGet(RedisKey key, RedisValue value, TimeSpan? expiry, When when, CommandFlags flags) /*************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringSetAndGet(key, value, expiry, when, flags) /***********************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue /**************************/ StringSetAndGet(RedisKey key, RedisValue value, TimeSpan? expiry = null, bool keepTtl = false, When when = When.Always, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************/ => Execute(db => db.StringSetAndGet(key, value, expiry, keepTtl, when, flags) /**************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue> /********************/ StringSetAndGetAsync(RedisKey key, RedisValue value, TimeSpan? expiry, When when, CommandFlags flags) /********************************************************************************************************************************************************************************************************/ => Execute(db => db.StringSetAndGetAsync(key, value, expiry, when, flags) /******************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue> /********************/ StringSetAndGetAsync(RedisKey key, RedisValue value, TimeSpan? expiry = null, bool keepTtl = false, When when = When.Always, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************/ => Execute(db => db.StringSetAndGetAsync(key, value, expiry, keepTtl, when, flags) /*********************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ StringSetBit(RedisKey key, long offset, bool bit, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringSetBit(key, offset, bit, flags) /**********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ StringSetBitAsync(RedisKey key, long offset, bool bit, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************************************/ => Execute(db => db.StringSetBitAsync(key, offset, bit, flags) /*****************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue /**************************/ StringSetRange(RedisKey key, long offset, RedisValue value, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************************************************************************/ => Execute(db => db.StringSetRange(key, offset, value, flags) /******************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue> /********************/ StringSetRangeAsync(RedisKey key, long offset, RedisValue value, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************************/ => Execute(db => db.StringSetRangeAsync(key, offset, value, flags) /*************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ TryWait(Task task) /*******************************************************************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.TryWait(task) /**********************************************************************************************************************/ , (ex, caller) => $"{caller} ");
        public void /********************************/ Wait(Task task) /**********************************************************************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.Wait(task) /*************************************************************************************************************************/ , (ex, caller) => $"{caller} ");
        public T /***********************************/ Wait<T>(Task<T> task) /****************************************************************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.Wait(task) /*************************************************************************************************************************/ , (ex, caller) => $"{caller} ");
        public void /********************************/ WaitAll(params Task[] tasks) /*********************************************************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.WaitAll(tasks) /*********************************************************************************************************************/ , (ex, caller) => $"{caller} ");
        public GeoRadiusResult[] /*******************/ GeoSearch(RedisKey key, RedisValue member, GeoSearchShape shape, int count = -1, bool demandClosest = true, Order? order = null, GeoRadiusOptions options = GeoRadiusOptions.Default, CommandFlags flags = CommandFlags.None) /********************************************************************************/ => Execute(db => db.GeoSearch(key, member, shape, count, demandClosest, order, options, flags) /*********************************************************/ , (ex, caller) => $"{caller} {key}");
        public GeoRadiusResult[] /*******************/ GeoSearch(RedisKey key, double longitude, double latitude, GeoSearchShape shape, int count = -1, bool demandClosest = true, Order? order = null, GeoRadiusOptions options = GeoRadiusOptions.Default, CommandFlags flags = CommandFlags.None) /****************************************************************/ => Execute(db => db.GeoSearch(key, longitude, latitude, shape, count, demandClosest, order, options, flags) /********************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ GeoSearchAndStore(RedisKey sourceKey, RedisKey destinationKey, RedisValue member, GeoSearchShape shape, int count = -1, bool demandClosest = true, Order? order = null, bool storeDistances = false, CommandFlags flags = CommandFlags.None) /*****************************************************************/ => Execute(db => db.GeoSearchAndStore(sourceKey, destinationKey, member, shape, count, demandClosest, order, storeDistances, flags) /********************/ , (ex, caller) => $"{caller} {sourceKey}");
        public long /********************************/ GeoSearchAndStore(RedisKey sourceKey, RedisKey destinationKey, double longitude, double latitude, GeoSearchShape shape, int count, bool demandClosest, Order? order, bool storeDistances, CommandFlags flags) /************************************************************************************************/ => Execute(db => db.GeoSearchAndStore(sourceKey, destinationKey, longitude, latitude, shape, count, demandClosest, order, storeDistances, flags) /*******/ , (ex, caller) => $"{caller} {sourceKey}");
        public ExpireResult[] /**********************/ HashFieldExpire(RedisKey key, RedisValue[] hashFields, TimeSpan expiry, ExpireWhen when = ExpireWhen.Always, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************/ => Execute(db => db.HashFieldExpire(key, hashFields, expiry, when, flags) /******************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public ExpireResult[] /**********************/ HashFieldExpire(RedisKey key, RedisValue[] hashFields, DateTime expiry, ExpireWhen when = ExpireWhen.Always, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************/ => Execute(db => db.HashFieldExpire(key, hashFields, expiry, when, flags) /******************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long[] /******************************/ HashFieldGetExpireDateTime(RedisKey key, RedisValue[] hashFields, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************/ => Execute(db => db.HashFieldGetExpireDateTime(key, hashFields, flags) /*********************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public PersistResult[] /*********************/ HashFieldPersist(RedisKey key, RedisValue[] hashFields, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashFieldPersist(key, hashFields, flags) /*******************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long[] /******************************/ HashFieldGetTimeToLive(RedisKey key, RedisValue[] hashFields, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************************************************/ => Execute(db => db.HashFieldGetTimeToLive(key, hashFields, flags) /*************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue /**************************/ HashRandomField(RedisKey key, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashRandomField(key, flags) /********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue[] /************************/ HashRandomFields(RedisKey key, long count, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashRandomFields(key, count, flags) /************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public HashEntry[] /*************************/ HashRandomFieldsWithValues(RedisKey key, long count, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashRandomFieldsWithValues(key, count, flags) /**************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public IEnumerable<RedisValue> /*************/ HashScanNoValues(RedisKey key, RedisValue pattern = default, int pageSize = _RedisBase.CursorUtils.DefaultLibraryPageSize, long cursor = _RedisBase.CursorUtils.Origin, int pageOffset = 0, CommandFlags flags = CommandFlags.None) /**************************************************************************/ => Execute(db => db.HashScanNoValues(key, pattern, pageSize, cursor, pageOffset, flags) /****************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ KeyCopy(RedisKey sourceKey, RedisKey destinationKey, int destinationDatabase = -1, bool replace = false, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************************************************************/ => Execute(db => db.KeyCopy(sourceKey, destinationKey, destinationDatabase, replace, flags) /************************************************************/ , (ex, caller) => $"{caller} {sourceKey} {destinationKey}");
        public string /******************************/ KeyEncoding(RedisKey key, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyEncoding(key, flags) /************************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ KeyExpire(RedisKey key, TimeSpan? expiry, ExpireWhen when = ExpireWhen.Always, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************/ => Execute(db => db.KeyExpire(key, expiry, when, flags) /************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public bool /********************************/ KeyExpire(RedisKey key, DateTime? expiry, ExpireWhen when = ExpireWhen.Always, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************/ => Execute(db => db.KeyExpire(key, expiry, when, flags) /************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public DateTime? /***************************/ KeyExpireTime(RedisKey key, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyExpireTime(key, flags) /**********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long? /*******************************/ KeyFrequency(RedisKey key, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyFrequency(key, flags) /***********************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long? /*******************************/ KeyRefCount(RedisKey key, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyRefCount(key, flags) /************************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public ListPopResult /***********************/ ListLeftPop(RedisKey[] keys, long count, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************************************************/ => Execute(db => db.ListLeftPop(keys, count, flags) /****************************************************************************************************/ , (ex, caller) => $"{caller}");
        public long /********************************/ ListPosition(RedisKey key, RedisValue element, long rank = 1, long maxLength = 0, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************/ => Execute(db => db.ListPosition(key, element, rank, maxLength, flags) /*********************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long[] /******************************/ ListPositions(RedisKey key, RedisValue element, long count, long rank = 1, long maxLength = 0, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************/ => Execute(db => db.ListPositions(key, element, count, rank, maxLength, flags) /*************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue /**************************/ ListMove(RedisKey sourceKey, RedisKey destinationKey, ListSide sourceSide, ListSide destinationSide, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************/ => Execute(db => db.ListMove(sourceKey, destinationKey, sourceSide, destinationSide, flags) /************************************************************/ , (ex, caller) => $"{caller} {sourceKey} {destinationKey}");
        public ListPopResult /***********************/ ListRightPop(RedisKey[] keys, long count, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************************************/ => Execute(db => db.ListRightPop(keys, count, flags) /***************************************************************************************************/ , (ex, caller) => $"{caller}");
        public RedisResult /*************************/ ScriptEvaluateReadOnly(string script, RedisKey[] keys = null, RedisValue[] values = null, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************/ => Execute(db => db.ScriptEvaluateReadOnly(script, keys, values, flags) /********************************************************************************/ , (ex, caller) => $"{caller}");
        public RedisResult /*************************/ ScriptEvaluateReadOnly(byte[] hash, RedisKey[] keys = null, RedisValue[] values = null, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************/ => Execute(db => db.ScriptEvaluateReadOnly(hash, keys, values, flags) /**********************************************************************************/ , (ex, caller) => $"{caller}");
        public bool[] /******************************/ SetContains(RedisKey key, RedisValue[] values, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetContains(key, values, flags) /****************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ SetIntersectionLength(RedisKey[] keys, long limit = 0, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetIntersectionLength(keys, limit, flags) /******************************************************************************************/ , (ex, caller) => $"{caller}");
        public bool /********************************/ SortedSetAdd(RedisKey key, RedisValue member, double score, SortedSetWhen when = SortedSetWhen.Always, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************/ => Execute(db => db.SortedSetAdd(key, member, score, when, flags) /**************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ SortedSetAdd(RedisKey key, SortedSetEntry[] values, SortedSetWhen when = SortedSetWhen.Always, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************/ => Execute(db => db.SortedSetAdd(key, values, when, flags) /*********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue[] /************************/ SortedSetCombine(SetOperation operation, RedisKey[] keys, double[] weights = null, Aggregate aggregate = Aggregate.Sum, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************/ => Execute(db => db.SortedSetCombine(operation, keys, weights, aggregate, flags) /***********************************************************************/ , (ex, caller) => $"{caller}");
        public SortedSetEntry[] /********************/ SortedSetCombineWithScores(SetOperation operation, RedisKey[] keys, double[] weights = null, Aggregate aggregate = Aggregate.Sum, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************/ => Execute(db => db.SortedSetCombineWithScores(operation, keys, weights, aggregate, flags) /*************************************************************/ , (ex, caller) => $"{caller}");
        public long /********************************/ SortedSetIntersectionLength(RedisKey[] keys, long limit = 0, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetIntersectionLength(keys, limit, flags) /************************************************************************************/ , (ex, caller) => $"{caller}");
        public RedisValue /**************************/ SortedSetRandomMember(RedisKey key, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetRandomMember(key, flags) /**************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public RedisValue[] /************************/ SortedSetRandomMembers(RedisKey key, long count, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetRandomMembers(key, count, flags) /******************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public SortedSetEntry[] /********************/ SortedSetRandomMembersWithScores(RedisKey key, long count, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetRandomMembersWithScores(key, count, flags) /********************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public double?[] /***************************/ SortedSetScores(RedisKey key, RedisValue[] members, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetScores(key, members, flags) /***********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public SortedSetPopResult /******************/ SortedSetPop(RedisKey[] keys, long count, Order order = Order.Ascending, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetPop(keys, count, order, flags) /********************************************************************************************/ , (ex, caller) => $"{caller}");
        public bool /********************************/ SortedSetUpdate(RedisKey key, RedisValue member, double score, SortedSetWhen when = SortedSetWhen.Always, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************/ => Execute(db => db.SortedSetUpdate(key, member, score, when, flags) /***********************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ SortedSetUpdate(RedisKey key, SortedSetEntry[] values, SortedSetWhen when = SortedSetWhen.Always, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************************/ => Execute(db => db.SortedSetUpdate(key, values, when, flags) /******************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public StreamAutoClaimResult /***************/ StreamAutoClaim(RedisKey key, RedisValue consumerGroup, RedisValue claimingConsumer, long minIdleTimeInMs, RedisValue startAtId, int? count = null, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************/ => Execute(db => db.StreamAutoClaim(key, consumerGroup, claimingConsumer, minIdleTimeInMs, startAtId, count, flags) /************************************/ , (ex, caller) => $"{caller} {key}");
        public StreamAutoClaimIdsOnlyResult /********/ StreamAutoClaimIdsOnly(RedisKey key, RedisValue consumerGroup, RedisValue claimingConsumer, long minIdleTimeInMs, RedisValue startAtId, int? count = null, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************/ => Execute(db => db.StreamAutoClaimIdsOnly(key, consumerGroup, claimingConsumer, minIdleTimeInMs, startAtId, count, flags) /*****************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ StringBitCount(RedisKey key, long start = 0, long end = -1, StringIndexType indexType = StringIndexType.Byte, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************/ => Execute(db => db.StringBitCount(key, start, end, indexType, flags) /**********************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public long /********************************/ StringBitPosition(RedisKey key, bool bit, long start = 0, long end = -1, StringIndexType indexType = StringIndexType.Byte, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************/ => Execute(db => db.StringBitPosition(key, bit, start, end, indexType, flags) /**************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public string /******************************/ StringLongestCommonSubsequence(RedisKey first, RedisKey second, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************************/ => Execute(db => db.StringLongestCommonSubsequence(first, second, flags) /*******************************************************************************/ , (ex, caller) => $"{caller} {first} {second}");
        public long /********************************/ StringLongestCommonSubsequenceLength(RedisKey first, RedisKey second, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************************/ => Execute(db => db.StringLongestCommonSubsequenceLength(first, second, flags) /*************************************************************************/ , (ex, caller) => $"{caller}");
        public LCSMatchResult /**********************/ StringLongestCommonSubsequenceWithMatches(RedisKey first, RedisKey second, long minLength = 0, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************/ => Execute(db => db.StringLongestCommonSubsequenceWithMatches(first, second, minLength, flags) /*********************************************************/ , (ex, caller) => $"{caller} {first} {second}");
        public Task<GeoRadiusResult[]> /*************/ GeoSearchAsync(RedisKey key, RedisValue member, GeoSearchShape shape, int count = -1, bool demandClosest = true, Order? order = null, GeoRadiusOptions options = GeoRadiusOptions.Default, CommandFlags flags = CommandFlags.None) /***************************************************************************/ => Execute(db => db.GeoSearchAsync(key, member, shape, count, demandClosest, order, options, flags) /****************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<GeoRadiusResult[]> /*************/ GeoSearchAsync(RedisKey key, double longitude, double latitude, GeoSearchShape shape, int count = -1, bool demandClosest = true, Order? order = null, GeoRadiusOptions options = GeoRadiusOptions.Default, CommandFlags flags = CommandFlags.None) /***********************************************************/ => Execute(db => db.GeoSearchAsync(key, longitude, latitude, shape, count, demandClosest, order, options, flags) /***************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ GeoSearchAndStoreAsync(RedisKey sourceKey, RedisKey destinationKey, RedisValue member, GeoSearchShape shape, int count = -1, bool demandClosest = true, Order? order = null, bool storeDistances = false, CommandFlags flags = CommandFlags.None) /************************************************************/ => Execute(db => db.GeoSearchAndStoreAsync(sourceKey, destinationKey, member, shape, count, demandClosest, order, storeDistances, flags) /***************/ , (ex, caller) => $"{caller} {sourceKey} {destinationKey}");
        public Task<long> /**************************/ GeoSearchAndStoreAsync(RedisKey sourceKey, RedisKey destinationKey, double longitude, double latitude, GeoSearchShape shape, int count = -1, bool demandClosest = true, Order? order = null, bool storeDistances = false, CommandFlags flags = CommandFlags.None) /********************************************/ => Execute(db => db.GeoSearchAndStoreAsync(sourceKey, destinationKey, longitude, latitude, shape, count, demandClosest, order, storeDistances, flags) /**/ , (ex, caller) => $"{caller} {sourceKey} {destinationKey}");
        public Task<ExpireResult[]> /****************/ HashFieldExpireAsync(RedisKey key, RedisValue[] hashFields, TimeSpan expiry, ExpireWhen when = ExpireWhen.Always, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************/ => Execute(db => db.HashFieldExpireAsync(key, hashFields, expiry, when, flags) /*************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<ExpireResult[]> /****************/ HashFieldExpireAsync(RedisKey key, RedisValue[] hashFields, DateTime expiry, ExpireWhen when = ExpireWhen.Always, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************/ => Execute(db => db.HashFieldExpireAsync(key, hashFields, expiry, when, flags) /*************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long[]> /************************/ HashFieldGetExpireDateTimeAsync(RedisKey key, RedisValue[] hashFields, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************/ => Execute(db => db.HashFieldGetExpireDateTimeAsync(key, hashFields, flags) /****************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<PersistResult[]> /***************/ HashFieldPersistAsync(RedisKey key, RedisValue[] hashFields, CommandFlags flags = CommandFlags.None) /*********************************************************************************************************************************************************************************************************/ => Execute(db => db.HashFieldPersistAsync(key, hashFields, flags) /**************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long[]> /************************/ HashFieldGetTimeToLiveAsync(RedisKey key, RedisValue[] hashFields, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************************/ => Execute(db => db.HashFieldGetTimeToLiveAsync(key, hashFields, flags) /********************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue> /********************/ HashRandomFieldAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashRandomFieldAsync(key, flags) /***************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue[]> /******************/ HashRandomFieldsAsync(RedisKey key, long count, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashRandomFieldsAsync(key, count, flags) /*******************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<HashEntry[]> /*******************/ HashRandomFieldsWithValuesAsync(RedisKey key, long count, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************************************/ => Execute(db => db.HashRandomFieldsWithValuesAsync(key, count, flags) /*********************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public IAsyncEnumerable<RedisValue> /********/ HashScanNoValuesAsync(RedisKey key, RedisValue pattern = default, int pageSize = _RedisBase.CursorUtils.DefaultLibraryPageSize, long cursor = _RedisBase.CursorUtils.Origin, int pageOffset = 0, CommandFlags flags = CommandFlags.None) /*********************************************************************/ => Execute(db => db.HashScanNoValuesAsync(key, pattern, pageSize, cursor, pageOffset, flags) /***********************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ KeyCopyAsync(RedisKey sourceKey, RedisKey destinationKey, int destinationDatabase = -1, bool replace = false, CommandFlags flags = CommandFlags.None) /********************************************************************************************************************************************************/ => Execute(db => db.KeyCopyAsync(sourceKey, destinationKey, destinationDatabase, replace, flags) /*******************************************************/ , (ex, caller) => $"{caller} {sourceKey} {destinationKey}");
        public Task<string> /************************/ KeyEncodingAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyEncodingAsync(key, flags) /*******************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ KeyExpireAsync(RedisKey key, TimeSpan? expiry, ExpireWhen when = ExpireWhen.Always, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************************************************/ => Execute(db => db.KeyExpireAsync(key, expiry, when, flags) /*******************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ KeyExpireAsync(RedisKey key, DateTime? expiry, ExpireWhen when = ExpireWhen.Always, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************************************************/ => Execute(db => db.KeyExpireAsync(key, expiry, when, flags) /*******************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<DateTime?> /*********************/ KeyExpireTimeAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyExpireTimeAsync(key, flags) /*****************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long?> /*************************/ KeyFrequencyAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyFrequencyAsync(key, flags) /******************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long?> /*************************/ KeyRefCountAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************************************************************************************/ => Execute(db => db.KeyRefCountAsync(key, flags) /*******************************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<ListPopResult> /*****************/ ListLeftPopAsync(RedisKey[] keys, long count, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************************************************************************/ => Execute(db => db.ListLeftPopAsync(keys, count, flags) /***********************************************************************************************/ , (ex, caller) => $"{caller}");
        public Task<long> /**************************/ ListPositionAsync(RedisKey key, RedisValue element, long rank = 1, long maxLength = 0, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************/ => Execute(db => db.ListPositionAsync(key, element, rank, maxLength, flags) /****************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long[]> /************************/ ListPositionsAsync(RedisKey key, RedisValue element, long count, long rank = 1, long maxLength = 0, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************/ => Execute(db => db.ListPositionsAsync(key, element, count, rank, maxLength, flags) /********************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue> /********************/ ListMoveAsync(RedisKey sourceKey, RedisKey destinationKey, ListSide sourceSide, ListSide destinationSide, CommandFlags flags = CommandFlags.None) /************************************************************************************************************************************************************/ => Execute(db => db.ListMoveAsync(sourceKey, destinationKey, sourceSide, destinationSide, flags) /*******************************************************/ , (ex, caller) => $"{caller} {sourceKey} {destinationKey}");
        public Task<ListPopResult> /*****************/ ListRightPopAsync(RedisKey[] keys, long count, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************************************************************/ => Execute(db => db.ListRightPopAsync(keys, count, flags) /**********************************************************************************************/ , (ex, caller) => $"{caller}");
        public Task<RedisResult> /*******************/ ScriptEvaluateReadOnlyAsync(string script, RedisKey[] keys = null, RedisValue[] values = null, CommandFlags flags = CommandFlags.None) /***********************************************************************************************************************************************************************/ => Execute(db => db.ScriptEvaluateReadOnlyAsync(script, keys, values, flags) /***************************************************************************/ , (ex, caller) => $"{caller}");
        public Task<RedisResult> /*******************/ ScriptEvaluateReadOnlyAsync(byte[] hash, RedisKey[] keys = null, RedisValue[] values = null, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************************************************************************/ => Execute(db => db.ScriptEvaluateReadOnlyAsync(hash, keys, values, flags) /*****************************************************************************/ , (ex, caller) => $"{caller}");
        public Task<bool[]> /************************/ SetContainsAsync(RedisKey key, RedisValue[] values, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************************************/ => Execute(db => db.SetContainsAsync(key, values, flags) /***********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ SetIntersectionLengthAsync(RedisKey[] keys, long limit = 0, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************************************************************************/ => Execute(db => db.SetIntersectionLengthAsync(keys, limit, flags) /*************************************************************************************/ , (ex, caller) => $"{caller}");
        public Task<bool> /**************************/ SortedSetAddAsync(RedisKey key, RedisValue member, double score, SortedSetWhen when = SortedSetWhen.Always, CommandFlags flags = CommandFlags.None) /**********************************************************************************************************************************************************/ => Execute(db => db.SortedSetAddAsync(key, member, score, when, flags) /*********************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ SortedSetAddAsync(RedisKey key, SortedSetEntry[] values, SortedSetWhen when = SortedSetWhen.Always, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************/ => Execute(db => db.SortedSetAddAsync(key, values, when, flags) /****************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue[]> /******************/ SortedSetCombineAsync(SetOperation operation, RedisKey[] keys, double[] weights = null, Aggregate aggregate = Aggregate.Sum, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************/ => Execute(db => db.SortedSetCombineAsync(operation, keys, weights, aggregate, flags) /******************************************************************/ , (ex, caller) => $"{caller}");
        public Task<SortedSetEntry[]> /**************/ SortedSetCombineWithScoresAsync(SetOperation operation, RedisKey[] keys, double[] weights = null, Aggregate aggregate = Aggregate.Sum, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************/ => Execute(db => db.SortedSetCombineWithScoresAsync(operation, keys, weights, aggregate, flags) /********************************************************/ , (ex, caller) => $"{caller}");
        public Task<long> /**************************/ SortedSetIntersectionLengthAsync(RedisKey[] keys, long limit = 0, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetIntersectionLengthAsync(keys, limit, flags) /*******************************************************************************/ , (ex, caller) => $"{caller}");
        public Task<RedisValue> /********************/ SortedSetRandomMemberAsync(RedisKey key, CommandFlags flags = CommandFlags.None) /*****************************************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetRandomMemberAsync(key, flags) /*********************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<RedisValue[]> /******************/ SortedSetRandomMembersAsync(RedisKey key, long count, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetRandomMembersAsync(key, count, flags) /*************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<SortedSetEntry[]> /**************/ SortedSetRandomMembersWithScoresAsync(RedisKey key, long count, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetRandomMembersWithScoresAsync(key, count, flags) /***************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<double?[]> /*********************/ SortedSetScoresAsync(RedisKey key, RedisValue[] members, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetScoresAsync(key, members, flags) /******************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<bool> /**************************/ SortedSetUpdateAsync(RedisKey key, RedisValue member, double score, SortedSetWhen when = SortedSetWhen.Always, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************/ => Execute(db => db.SortedSetUpdateAsync(key, member, score, when, flags) /******************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ SortedSetUpdateAsync(RedisKey key, SortedSetEntry[] values, SortedSetWhen when = SortedSetWhen.Always, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************************/ => Execute(db => db.SortedSetUpdateAsync(key, values, when, flags) /*************************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<SortedSetPopResult> /************/ SortedSetPopAsync(RedisKey[] keys, long count, Order order = Order.Ascending, CommandFlags flags = CommandFlags.None) /****************************************************************************************************************************************************************************************/ => Execute(db => db.SortedSetPopAsync(keys, count, order, flags) /***************************************************************************************/ , (ex, caller) => $"{caller}");
        public Task<StreamAutoClaimResult> /*********/ StreamAutoClaimAsync(RedisKey key, RedisValue consumerGroup, RedisValue claimingConsumer, long minIdleTimeInMs, RedisValue startAtId, int? count = null, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************/ => Execute(db => db.StreamAutoClaimAsync(key, consumerGroup, claimingConsumer, minIdleTimeInMs, startAtId, count, flags) /*******************************/ , (ex, caller) => $"{caller} {key}");
        public Task<StreamAutoClaimIdsOnlyResult> /**/ StreamAutoClaimIdsOnlyAsync(RedisKey key, RedisValue consumerGroup, RedisValue claimingConsumer, long minIdleTimeInMs, RedisValue startAtId, int? count = null, CommandFlags flags = CommandFlags.None) /******************************************************************************************************/ => Execute(db => db.StreamAutoClaimIdsOnlyAsync(key, consumerGroup, claimingConsumer, minIdleTimeInMs, startAtId, count, flags) /************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ StringBitCountAsync(RedisKey key, long start = 0, long end = -1, StringIndexType indexType = StringIndexType.Byte, CommandFlags flags = CommandFlags.None) /***************************************************************************************************************************************************/ => Execute(db => db.StringBitCountAsync(key, start, end, indexType, flags) /*****************************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<long> /**************************/ StringBitPositionAsync(RedisKey key, bool bit, long start = 0, long end = -1, StringIndexType indexType = StringIndexType.Byte, CommandFlags flags = CommandFlags.None) /**************************************************************************************************************************************/ => Execute(db => db.StringBitPositionAsync(key, bit, start, end, indexType, flags) /*********************************************************************/ , (ex, caller) => $"{caller} {key}");
        public Task<string> /************************/ StringLongestCommonSubsequenceAsync(RedisKey first, RedisKey second, CommandFlags flags = CommandFlags.None) /*************************************************************************************************************************************************************************************************/ => Execute(db => db.StringLongestCommonSubsequenceAsync(first, second, flags) /**************************************************************************/ , (ex, caller) => $"{caller} {first} {second}");
        public Task<long> /**************************/ StringLongestCommonSubsequenceLengthAsync(RedisKey first, RedisKey second, CommandFlags flags = CommandFlags.None) /*******************************************************************************************************************************************************************************************/ => Execute(db => db.StringLongestCommonSubsequenceLengthAsync(first, second, flags) /********************************************************************/ , (ex, caller) => $"{caller} {first} {second}");
        public Task<LCSMatchResult> /****************/ StringLongestCommonSubsequenceWithMatchesAsync(RedisKey first, RedisKey second, long minLength = 0, CommandFlags flags = CommandFlags.None) /******************************************************************************************************************************************************************/ => Execute(db => db.StringLongestCommonSubsequenceWithMatchesAsync(first, second, minLength, flags) /****************************************************/ , (ex, caller) => $"{caller} {first} {second}");
    }
}